    Checking zconsensus v0.1.0 (/home/zach/github/ZDB/crates/zconsensus)
    Checking zperf-engine v0.1.0 (/home/zach/github/ZDB/crates/zperf-engine)
    Checking zcommon v0.1.0 (/home/zach/github/ZDB/crates/zcommon)
    Checking zvec-kernels v0.1.0 (/home/zach/github/ZDB/crates/zvec-kernels)
    Checking zgeo-economics v0.1.0 (/home/zach/github/ZDB/crates/zgeo-economics)
    Checking zsql-parser v0.1.0 (/home/zach/github/ZDB/crates/zsql-parser)
warning: methods `access` and `get_access_count` are never used
   --> crates/zperf-engine/src/lockfree.rs:495:8
    |
486 | impl<V> CacheEntry<V> {
    | --------------------- methods in this implementation
...
495 |     fn access(&self) -> &V {
    |        ^^^^^^
...
501 |     fn get_access_count(&self) -> usize {
    |        ^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: field `serializer` is never read
   --> crates/zperf-engine/src/serialization.rs:353:5
    |
352 | pub struct BatchSerializer {
    |            --------------- field in this struct
353 |     serializer: DatabaseSerializer,
    |     ^^^^^^^^^^

warning: field `serializer` is never read
   --> crates/zperf-engine/src/serialization.rs:410:5
    |
409 | pub struct BatchDeserializer {
    |            ----------------- field in this struct
410 |     serializer: DatabaseSerializer,
    |     ^^^^^^^^^^

warning: hiding a lifetime that's elided elsewhere is confusing
   --> crates/zperf-engine/src/lockfree.rs:182:16
    |
182 |     pub fn get(&self, key: &K) -> Option<crossbeam_skiplist::map::Entry<K, V>> {
    |                ^^^^^                     ------------------------------------ the same lifetime is hidden here
    |                |
    |                the lifetime is elided here
    |
    = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
    = note: `#[warn(mismatched_lifetime_syntaxes)]` on by default
help: use `'_` for type paths
    |
182 |     pub fn get(&self, key: &K) -> Option<crossbeam_skiplist::map::Entry<'_, K, V>> {
    |                                                                         +++

warning: hiding a lifetime that's elided elsewhere is confusing
   --> crates/zperf-engine/src/lockfree.rs:188:19
    |
188 |     pub fn remove(&self, key: &K) -> Option<crossbeam_skiplist::map::Entry<K, V>> {
    |                   ^^^^^                     ------------------------------------ the same lifetime is hidden here
    |                   |
    |                   the lifetime is elided here
    |
    = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
help: use `'_` for type paths
    |
188 |     pub fn remove(&self, key: &K) -> Option<crossbeam_skiplist::map::Entry<'_, K, V>> {
    |                                                                            +++

warning: hiding a lifetime that's elided elsewhere is confusing
   --> crates/zperf-engine/src/lockfree.rs:214:17
    |
214 |     pub fn iter(&self) -> impl Iterator<Item = crossbeam_skiplist::map::Entry<K, V>> {
    |                 ^^^^^                          ------------------------------------ the same lifetime is hidden here
    |                 |
    |                 the lifetime is elided here
    |
    = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
help: use `'_` for type paths
    |
214 |     pub fn iter(&self) -> impl Iterator<Item = crossbeam_skiplist::map::Entry<'_, K, V>> {
    |                                                                               +++

warning: hiding a lifetime that's elided elsewhere is confusing
   --> crates/zperf-engine/src/lockfree.rs:219:21
    |
219 |     pub fn range<R>(&self, range: R) -> impl Iterator<Item = crossbeam_skiplist::map::Entry<K, V>>
    |                     ^^^^^ the lifetime is elided here        ------------------------------------ the same lifetime is hidden here
    |
    = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
help: use `'_` for type paths
    |
219 |     pub fn range<R>(&self, range: R) -> impl Iterator<Item = crossbeam_skiplist::map::Entry<'_, K, V>>
    |                                                                                             +++

warning: hiding a lifetime that's elided elsewhere is confusing
   --> crates/zperf-engine/src/lockfree.rs:227:18
    |
227 |     pub fn front(&self) -> Option<crossbeam_skiplist::map::Entry<K, V>> {
    |                  ^^^^^            ------------------------------------ the same lifetime is hidden here
    |                  |
    |                  the lifetime is elided here
    |
    = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
help: use `'_` for type paths
    |
227 |     pub fn front(&self) -> Option<crossbeam_skiplist::map::Entry<'_, K, V>> {
    |                                                                  +++

warning: hiding a lifetime that's elided elsewhere is confusing
   --> crates/zperf-engine/src/lockfree.rs:232:17
    |
232 |     pub fn back(&self) -> Option<crossbeam_skiplist::map::Entry<K, V>> {
    |                 ^^^^^            ------------------------------------ the same lifetime is hidden here
    |                 |
    |                 the lifetime is elided here
    |
    = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
help: use `'_` for type paths
    |
232 |     pub fn back(&self) -> Option<crossbeam_skiplist::map::Entry<'_, K, V>> {
    |                                                                 +++

warning: hiding a lifetime that's elided elsewhere is confusing
   --> crates/zperf-engine/src/lockfree.rs:337:17
    |
337 |     pub fn iter(&self) -> impl Iterator<Item = crossbeam_skiplist::set::Entry<T>> {
    |                 ^^^^^                          --------------------------------- the same lifetime is hidden here
    |                 |
    |                 the lifetime is elided here
    |
    = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
help: use `'_` for type paths
    |
337 |     pub fn iter(&self) -> impl Iterator<Item = crossbeam_skiplist::set::Entry<'_, T>> {
    |                                                                               +++

warning: hiding a lifetime that's elided elsewhere is confusing
   --> crates/zperf-engine/src/lockfree.rs:342:21
    |
342 |     pub fn range<R>(&self, range: R) -> impl Iterator<Item = crossbeam_skiplist::set::Entry<T>>
    |                     ^^^^^ the lifetime is elided here        --------------------------------- the same lifetime is hidden here
    |
    = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
help: use `'_` for type paths
    |
342 |     pub fn range<R>(&self, range: R) -> impl Iterator<Item = crossbeam_skiplist::set::Entry<'_, T>>
    |                                                                                             +++

warning: hiding a lifetime that's elided elsewhere is confusing
   --> crates/zperf-engine/src/lockfree.rs:350:18
    |
350 |     pub fn front(&self) -> Option<crossbeam_skiplist::set::Entry<T>> {
    |                  ^^^^^            --------------------------------- the same lifetime is hidden here
    |                  |
    |                  the lifetime is elided here
    |
    = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
help: use `'_` for type paths
    |
350 |     pub fn front(&self) -> Option<crossbeam_skiplist::set::Entry<'_, T>> {
    |                                                                  +++

warning: hiding a lifetime that's elided elsewhere is confusing
   --> crates/zperf-engine/src/lockfree.rs:355:17
    |
355 |     pub fn back(&self) -> Option<crossbeam_skiplist::set::Entry<T>> {
    |                 ^^^^^            --------------------------------- the same lifetime is hidden here
    |                 |
    |                 the lifetime is elided here
    |
    = help: the same lifetime is referred to in inconsistent ways, making the signature confusing
help: use `'_` for type paths
    |
355 |     pub fn back(&self) -> Option<crossbeam_skiplist::set::Entry<'_, T>> {
    |                                                                 +++

warning: `zperf-engine` (lib) generated 13 warnings
    Checking zmesh-network v0.1.0 (/home/zach/github/ZDB/crates/zmesh-network)
    Checking zcore-storage v0.1.0 (/home/zach/github/ZDB/crates/zcore-storage)
    Checking zcore-catalog v0.1.0 (/home/zach/github/ZDB/crates/zcore-catalog)
    Checking zbrain v0.1.0 (/home/zach/github/ZDB/crates/zbrain)
    Checking znotifications v0.1.0 (/home/zach/github/ZDB/crates/znotifications)
    Checking zpermissions v0.1.0 (/home/zach/github/ZDB/crates/zpermissions)
    Checking zobservability v0.1.0 (/home/zach/github/ZDB/crates/zobservability)
warning: unused variable: `start`
  --> crates/zbrain/src/observability.rs:31:13
   |
31 |         let start = Instant::now();
   |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_start`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `job_type`
   --> crates/zbrain/src/observability.rs:172:41
    |
172 |     pub fn record_job_submission(&self, job_type: &str, queue: &str) {
    |                                         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_job_type`

warning: unused variable: `job_type`
   --> crates/zbrain/src/observability.rs:180:41
    |
180 |     pub fn record_job_completion(&self, job_type: &str, status: &str, duration_seconds: f64) {
    |                                         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_job_type`

warning: unused variable: `priority`
   --> crates/zbrain/src/observability.rs:189:50
    |
189 |     pub fn record_queue_size(&self, queue: &str, priority: &str, size: u64) {
    |                                                  ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_priority`

    Checking zann-hnsw v0.1.0 (/home/zach/github/ZDB/crates/zann-hnsw)
    Checking zcollections v0.1.0 (/home/zach/github/ZDB/crates/zcollections)
    Checking ztransaction v0.1.0 (/home/zach/github/ZDB/crates/ztransaction)
warning: `zbrain` (lib) generated 4 warnings
    Checking zworker v0.1.0 (/home/zach/github/ZDB/crates/zworker)
warning: unused imports: `AuthStats`, `HealthCheckError`, and `QueueStats`
 --> crates/zobservability/src/service_health_checks.rs:4:61
  |
4 | use zcommon::health::{AuthHealthCheck, JobQueueHealthCheck, HealthCheckError, AuthStats, QueueStats};
  |                                                             ^^^^^^^^^^^^^^^^  ^^^^^^^^^  ^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Instant`, `SystemTime`, and `UNIX_EPOCH`
  --> crates/zobservability/src/distributed_tracing.rs:12:22
   |
12 |     time::{Duration, Instant, SystemTime, UNIX_EPOCH},
   |                      ^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^

warning: unused import: `std::sync::Arc`
   --> crates/zobservability/src/distributed_tracing.rs:492:9
    |
492 |     use std::sync::Arc;
    |         ^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashMap`
 --> crates/zobservability/src/dashboard_configs.rs:7:5
  |
7 | use std::collections::HashMap;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: use of deprecated associated function `handlebars::RenderError::new`: Use RenderErrorReason instead
   --> crates/znotifications/src/templates.rs:197:49
    |
197 |         .ok_or_else(|| handlebars::RenderError::new("Invalid timestamp"))?;
    |                                                 ^^^
    |
    = note: `#[warn(deprecated)]` on by default

warning: use of deprecated associated function `handlebars::RenderError::new`: Use RenderErrorReason instead
   --> crates/znotifications/src/templates.rs:204:49
    |
204 |         .ok_or_else(|| handlebars::RenderError::new("Invalid timestamp"))?;
    |                                                 ^^^

warning: use of deprecated associated function `handlebars::RenderError::new`: Use RenderErrorReason instead
   --> crates/znotifications/src/templates.rs:219:49
    |
219 |         .ok_or_else(|| handlebars::RenderError::new("Invalid amount"))?;
    |                                                 ^^^

warning: use of deprecated associated function `handlebars::RenderError::new`: Use RenderErrorReason instead
   --> crates/znotifications/src/templates.rs:245:49
    |
245 |         .ok_or_else(|| handlebars::RenderError::new("Invalid text"))?;
    |                                                 ^^^

warning: use of deprecated associated function `handlebars::RenderError::new`: Use RenderErrorReason instead
   --> crates/znotifications/src/templates.rs:270:49
    |
270 |         .ok_or_else(|| handlebars::RenderError::new("Invalid text"))?;
    |                                                 ^^^

warning: use of deprecated associated function `handlebars::RenderError::new`: Use RenderErrorReason instead
   --> crates/znotifications/src/templates.rs:285:49
    |
285 |         .ok_or_else(|| handlebars::RenderError::new("Invalid text"))?;
    |                                                 ^^^

warning: use of deprecated associated function `handlebars::RenderError::new`: Use RenderErrorReason instead
   --> crates/znotifications/src/templates.rs:300:49
    |
300 |         .ok_or_else(|| handlebars::RenderError::new("Invalid count"))?;
    |                                                 ^^^

warning: use of deprecated associated function `handlebars::RenderError::new`: Use RenderErrorReason instead
   --> crates/znotifications/src/templates.rs:304:49
    |
304 |         .ok_or_else(|| handlebars::RenderError::new("Missing singular form"))?;
    |                                                 ^^^

warning: variable does not need to be mutable
   --> crates/znotifications/src/email.rs:352:13
    |
352 |         let mut content_builder = aws_sdk_ses::types::Content::builder()
    |             ----^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `response`
   --> crates/znotifications/src/email.rs:602:13
    |
602 |         let response = self.transport.send(&message)?;
    |             ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_response`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `org_id`
  --> crates/znotifications/src/tracking.rs:89:9
   |
89 |         org_id: u64,
   |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_org_id`

warning: unused variable: `date_from`
  --> crates/znotifications/src/tracking.rs:90:9
   |
90 |         date_from: i64,
   |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_date_from`

warning: unused variable: `date_to`
  --> crates/znotifications/src/tracking.rs:91:9
   |
91 |         date_to: i64,
   |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_date_to`

warning: unused variable: `org_id`
  --> crates/znotifications/src/tracking.rs:99:37
   |
99 |     pub fn get_delivery_rate(&self, org_id: u64, days: u32) -> Result<DeliveryRate> {
   |                                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_org_id`

warning: unused variable: `days`
  --> crates/znotifications/src/tracking.rs:99:50
   |
99 |     pub fn get_delivery_rate(&self, org_id: u64, days: u32) -> Result<DeliveryRate> {
   |                                                  ^^^^ help: if this is intentional, prefix it with an underscore: `_days`

warning: field `http_client` is never read
  --> crates/znotifications/src/email.rs:34:5
   |
29 | pub struct EmailService {
   |            ------------ field in this struct
...
34 |     http_client: Client,
   |     ^^^^^^^^^^^
   |
   = note: `EmailService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `ses_client` is never read
   --> crates/znotifications/src/email.rs:296:5
    |
295 | pub struct AwsSesProvider {
    |            -------------- field in this struct
296 |     ses_client: Option<aws_sdk_ses::Client>,
    |     ^^^^^^^^^^

warning: field `http_client` is never read
  --> crates/znotifications/src/sms.rs:24:5
   |
19 | pub struct SmsService {
   |            ---------- field in this struct
...
24 |     http_client: Client,
   |     ^^^^^^^^^^^
   |
   = note: `SmsService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: field `sns_client` is never read
   --> crates/znotifications/src/sms.rs:240:5
    |
239 | pub struct AwsSnsProvider {
    |            -------------- field in this struct
240 |     sns_client: Option<aws_sdk_sns::Client>,
    |     ^^^^^^^^^^

warning: unused variable: `status_code`
   --> crates/zobservability/src/health.rs:448:9
    |
448 |     let status_code = match health.status {
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_status_code`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `device`
   --> crates/zobservability/src/metrics.rs:391:17
    |
391 |             let device = disk.name().to_string_lossy();
    |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_device`

warning: unused variable: `current_value`
   --> crates/zobservability/src/alerts.rs:214:9
    |
214 |         current_value: f64,
    |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current_value`

warning: unused variable: `hours`
   --> crates/zobservability/src/alerts.rs:293:43
    |
293 |     pub async fn get_alert_history(&self, hours: u32) -> Vec<ActiveAlert> {
    |                                           ^^^^^ help: if this is intentional, prefix it with an underscore: `_hours`

warning: unused variable: `start`
  --> crates/zobservability/src/service_health_checks.rs:59:13
   |
59 |         let start = Instant::now();
   |             ^^^^^ help: if this is intentional, prefix it with an underscore: `_start`

warning: unused variable: `period_duration`
   --> crates/zobservability/src/operational_intelligence.rs:460:13
    |
460 |         let period_duration = Duration::hours(period_hours as i64);
    |             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_period_duration`

warning: field `last_evaluation` is never read
  --> crates/zobservability/src/alerts.rs:82:5
   |
78 | pub struct AlertManager {
   |            ------------ field in this struct
...
82 |     last_evaluation: Arc<RwLock<HashMap<String, Instant>>>,
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: field `aggregation_windows` is never read
   --> crates/zobservability/src/operational_intelligence.rs:133:5
    |
130 | pub struct LogAggregationService {
    |            --------------------- field in this struct
...
133 |     aggregation_windows: Vec<StdDuration>,
    |     ^^^^^^^^^^^^^^^^^^^

warning: `znotifications` (lib) generated 19 warnings (run `cargo clippy --fix --lib -p znotifications` to apply 1 suggestion)
    Checking zauth v0.1.0 (/home/zach/github/ZDB/crates/zauth)
warning: `zobservability` (lib) generated 12 warnings (run `cargo clippy --fix --lib -p zobservability` to apply 4 suggestions)
warning: unused imports: `TransactionId` and `TransactionResult`
  --> crates/ztransaction/src/distributed/coordinator.rs:13:13
   |
13 | use crate::{TransactionId, TransactionResult};
   |             ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused import: `async_trait::async_trait`
  --> crates/ztransaction/src/distributed/coordinator.rs:14:5
   |
14 | use async_trait::async_trait;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `AtomicUsize`
  --> crates/ztransaction/src/distributed/coordinator.rs:19:36
   |
19 | use std::sync::atomic::{AtomicU64, AtomicUsize, Ordering};
   |                                    ^^^^^^^^^^^

warning: unused import: `ulid::Ulid`
  --> crates/ztransaction/src/distributed/coordinator.rs:25:5
   |
25 | use ulid::Ulid;
   |     ^^^^^^^^^^

warning: unused imports: `DistributedTransactionStatus` and `ProtocolType`
 --> crates/ztransaction/src/distributed/two_phase_commit.rs:8:35
  |
8 |     DistributedTransactionResult, DistributedTransactionStatus, GlobalTransactionId,
  |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
9 |     ParticipantId, ProtocolType,
  |                    ^^^^^^^^^^^^

warning: unused import: `async_trait::async_trait`
  --> crates/ztransaction/src/distributed/two_phase_commit.rs:11:5
   |
11 | use async_trait::async_trait;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `HashSet`
  --> crates/ztransaction/src/distributed/two_phase_commit.rs:14:33
   |
14 | use std::collections::{HashMap, HashSet};
   |                                 ^^^^^^^

warning: unused import: `timeout`
  --> crates/ztransaction/src/distributed/two_phase_commit.rs:18:26
   |
18 | use tokio::time::{sleep, timeout, Instant};
   |                          ^^^^^^^

warning: unused import: `error`
  --> crates/ztransaction/src/distributed/participants.rs:18:22
   |
18 | use tracing::{debug, error, info, warn};
   |                      ^^^^^

warning: unused import: `sleep`
  --> crates/ztransaction/src/distributed/messaging.rs:20:19
   |
20 | use tokio::time::{sleep, timeout, Instant};
   |                   ^^^^^

warning: unused import: `error`
  --> crates/ztransaction/src/distributed/messaging.rs:21:22
   |
21 | use tracing::{debug, error, info, warn};
   |                      ^^^^^

warning: unused import: `super::GlobalTransactionId`
   --> crates/ztransaction/src/distributed/messaging.rs:790:13
    |
790 |         use super::GlobalTransactionId;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `HashMap`
  --> crates/ztransaction/src/distributed/recovery.rs:15:24
   |
15 | use std::collections::{HashMap, HashSet};
   |                        ^^^^^^^

warning: unused import: `RwLock`
  --> crates/ztransaction/src/distributed/recovery.rs:18:25
   |
18 | use tokio::sync::{mpsc, RwLock};
   |                         ^^^^^^

warning: unused import: `Instant`
  --> crates/ztransaction/src/distributed/recovery.rs:19:26
   |
19 | use tokio::time::{sleep, Instant};
   |                          ^^^^^^^

warning: unused import: `async_trait::async_trait`
  --> crates/ztransaction/src/distributed/saga.rs:11:5
   |
11 | use async_trait::async_trait;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `timeout`
  --> crates/ztransaction/src/distributed/saga.rs:20:26
   |
20 | use tokio::time::{sleep, timeout, Instant};
   |                          ^^^^^^^

warning: unused import: `DistributedTransactionError`
 --> crates/ztransaction/src/distributed/conflict_resolution.rs:8:29
  |
8 |     DistributedTransaction, DistributedTransactionError, DistributedTransactionResult,
  |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `HashMap` and `VecDeque`
  --> crates/ztransaction/src/distributed/conflict_resolution.rs:16:24
   |
16 | use std::collections::{HashMap, HashSet, VecDeque};
   |                        ^^^^^^^           ^^^^^^^^

warning: unused import: `warn`
  --> crates/ztransaction/src/distributed/conflict_resolution.rs:20:28
   |
20 | use tracing::{debug, info, warn};
   |                            ^^^^

warning: unused import: `TransactionResult`
  --> crates/ztransaction/src/distributed/mod.rs:43:28
   |
43 | use crate::{TransactionId, TransactionResult};
   |                            ^^^^^^^^^^^^^^^^^

warning: unused import: `ulid::Ulid`
  --> crates/ztransaction/src/distributed/mod.rs:49:5
   |
49 | use ulid::Ulid;
   |     ^^^^^^^^^^

warning: fields `config`, `economic_tracker`, and `network_monitor` are never read
  --> crates/zmesh-network/src/analytics.rs:40:5
   |
38 | pub struct NetworkAnalytics {
   |            ---------------- fields in this struct
39 |     /// Configuration
40 |     config: Arc<MeshConfig>,
   |     ^^^^^^
...
44 |     economic_tracker: Arc<NetworkEconomicTracker>,
   |     ^^^^^^^^^^^^^^^^
45 |     /// Monitor reference
46 |     network_monitor: Arc<NetworkMonitor>,
   |     ^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: field `export_configs` is never read
   --> crates/zmesh-network/src/analytics.rs:254:5
    |
252 | pub struct DataExportManager {
    |            ----------------- field in this struct
253 |     /// Export configurations
254 |     export_configs: Arc<RwLock<HashMap<String, ExportConfig>>>,
    |     ^^^^^^^^^^^^^^

warning: constant `MAX_CONCURRENT_LOOKUPS` is never used
  --> crates/zmesh-network/src/discovery.rs:30:7
   |
30 | const MAX_CONCURRENT_LOOKUPS: usize = 5;
   |       ^^^^^^^^^^^^^^^^^^^^^^

warning: constant `DHT_MESSAGE_TIMEOUT` is never used
  --> crates/zmesh-network/src/discovery.rs:36:7
   |
36 | const DHT_MESSAGE_TIMEOUT: Duration = Duration::from_secs(10);
   |       ^^^^^^^^^^^^^^^^^^^

warning: fields `config`, `request_counter`, and `nat_engine` are never read
  --> crates/zmesh-network/src/discovery.rs:49:5
   |
45 | pub struct DHTPeerDiscovery {
   |            ---------------- fields in this struct
...
49 |     config: Arc<MeshConfig>,
   |     ^^^^^^
...
75 |     request_counter: Arc<AtomicU64>,
   |     ^^^^^^^^^^^^^^^
76 |     /// NAT traversal engine
77 |     nat_engine: Arc<NATTraversalEngine>,
   |     ^^^^^^^^^^

warning: field `last_refresh` is never read
  --> crates/zmesh-network/src/discovery.rs:88:5
   |
82 | pub struct KademliaRoutingTable {
   |            -------------------- field in this struct
...
88 |     last_refresh: HashMap<u8, SystemTime>,
   |     ^^^^^^^^^^^^
   |
   = note: `KademliaRoutingTable` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: associated function `send_dht_message` is never used
   --> crates/zmesh-network/src/discovery.rs:815:14
    |
231 | impl DHTPeerDiscovery {
    | --------------------- associated function in this implementation
...
815 |     async fn send_dht_message(_message: DHTMessage, _socket: &Arc<UdpSocket>) -> MeshResult<()> {
    |              ^^^^^^^^^^^^^^^^

warning: field `config` is never read
  --> crates/zmesh-network/src/economic.rs:38:5
   |
36 | pub struct NetworkEconomicTracker {
   |            ---------------------- field in this struct
37 |     /// Configuration
38 |     config: Arc<MeshConfig>,
   |     ^^^^^^

warning: associated functions `parse_destination_ip` and `process_wireguard_packet` are never used
   --> crates/zmesh-network/src/interface.rs:432:8
    |
 92 | impl TunInterfaceManager {
    | ------------------------ associated functions in this implementation
...
432 |     fn parse_destination_ip(packet: &[u8]) -> Option<IpAddr> {
    |        ^^^^^^^^^^^^^^^^^^^^
...
471 |     fn process_wireguard_packet(packet: &[u8]) -> Option<Vec<u8>> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^

warning: field `key_manager` is never read
  --> crates/zmesh-network/src/mesh.rs:51:5
   |
33 | pub struct ZMeshNetwork {
   |            ------------ field in this struct
...
51 |     key_manager: Arc<CryptoKeyManager>,
   |     ^^^^^^^^^^^

warning: field `config` is never read
  --> crates/zmesh-network/src/metrics.rs:40:5
   |
38 | pub struct BandwidthMetricsTracker {
   |            ----------------------- field in this struct
39 |     /// Configuration
40 |     config: Arc<MeshConfig>,
   |     ^^^^^^

warning: field `config` is never read
  --> crates/zmesh-network/src/monitoring.rs:60:5
   |
58 | pub struct NetworkMonitor {
   |            -------------- field in this struct
59 |     /// Configuration
60 |     config: Arc<MeshConfig>,
   |     ^^^^^^

warning: constant `STUN_TIMEOUT` is never used
  --> crates/zmesh-network/src/nat.rs:25:7
   |
25 | const STUN_TIMEOUT: Duration = Duration::from_secs(5);
   |       ^^^^^^^^^^^^

warning: constant `MAX_HOLE_PUNCH_ATTEMPTS` is never used
  --> crates/zmesh-network/src/nat.rs:28:7
   |
28 | const MAX_HOLE_PUNCH_ATTEMPTS: u32 = 10;
   |       ^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `TURN_ALLOCATION_LIFETIME` is never used
  --> crates/zmesh-network/src/nat.rs:40:7
   |
40 | const TURN_ALLOCATION_LIFETIME: Duration = Duration::from_secs(600); // 10 minutes
   |       ^^^^^^^^^^^^^^^^^^^^^^^^

warning: fields `config`, `address_mappings`, and `turn_allocations` are never read
  --> crates/zmesh-network/src/nat.rs:48:5
   |
46 | pub struct NATTraversalEngine {
   |            ------------------ fields in this struct
47 |     /// Configuration
48 |     config: Arc<MeshConfig>,
   |     ^^^^^^
...
58 |     address_mappings: Arc<RwLock<HashMap<SocketAddr, AddressMapping>>>,
   |     ^^^^^^^^^^^^^^^^
...
62 |     turn_allocations: Arc<RwLock<HashMap<SocketAddr, TURNAllocation>>>,
   |     ^^^^^^^^^^^^^^^^

warning: field `config` is never read
   --> crates/zmesh-network/src/peer.rs:107:5
    |
105 | pub struct PeerManager {
    |            ----------- field in this struct
106 |     /// Configuration
107 |     config: Arc<MeshConfig>,
    |     ^^^^^^

warning: constant `ROUTE_ADVERTISEMENT_TIMEOUT` is never used
  --> crates/zmesh-network/src/routing.rs:27:7
   |
27 | const ROUTE_ADVERTISEMENT_TIMEOUT: Duration = Duration::from_secs(30);
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `ROUTE_CONVERGENCE_TIMEOUT` is never used
  --> crates/zmesh-network/src/routing.rs:30:7
   |
30 | const ROUTE_CONVERGENCE_TIMEOUT: Duration = Duration::from_secs(300);
   |       ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: constant `MAX_ROUTE_AGE` is never used
  --> crates/zmesh-network/src/routing.rs:33:7
   |
33 | const MAX_ROUTE_AGE: Duration = Duration::from_secs(600);
   |       ^^^^^^^^^^^^^

warning: fields `config` and `route_announcements` are never read
  --> crates/zmesh-network/src/routing.rs:47:5
   |
43 | pub struct DistributedRoutingTable {
   |            ----------------------- fields in this struct
...
47 |     config: Arc<MeshConfig>,
   |     ^^^^^^
...
59 |     route_announcements: Arc<RwLock<HashMap<NodeId, RouteAnnouncement>>>,
   |     ^^^^^^^^^^^^^^^^^^^

warning: fields `config` and `ranking_algorithm` are never read
   --> crates/zmesh-network/src/routing.rs:146:5
    |
144 | pub struct PathComputationEngine {
    |            --------------------- fields in this struct
145 |     /// Configuration
146 |     config: Arc<MeshConfig>,
    |     ^^^^^^
...
152 |     ranking_algorithm: RankingAlgorithm,
    |     ^^^^^^^^^^^^^^^^^

warning: field `path_weights` is never read
   --> crates/zmesh-network/src/routing.rs:222:5
    |
218 | pub struct LoadBalancer {
    |            ------------ field in this struct
...
222 |     path_weights: Arc<RwLock<HashMap<String, f64>>>,
    |     ^^^^^^^^^^^^

warning: field `key_manager` is never read
  --> crates/zmesh-network/src/wireguard.rs:31:5
   |
27 | pub struct WireGuardManager {
   |            ---------------- field in this struct
...
31 |     key_manager: Arc<CryptoKeyManager>,
   |     ^^^^^^^^^^^

warning: unused variable: `transaction_id`
   --> crates/ztransaction/src/distributed/two_phase_commit.rs:529:42
    |
529 |     async fn get_transaction_info(&self, transaction_id: GlobalTransactionId) -> DistributedTransactionResult<(Vec<ParticipantId>, Vec<Tr...
    |                                          ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_transaction_id`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: field `timeout_event_receiver` is never read
  --> crates/ztransaction/src/manager.rs:58:5
   |
32 | pub struct TransactionManager<'a> {
   |            ------------------ field in this struct
...
58 |     timeout_event_receiver: Option<mpsc::UnboundedReceiver<TimeoutEvent>>,
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: fields `catalog`, `org_id`, and `savepoints` are never read
   --> crates/ztransaction/src/transaction.rs:224:5
    |
214 | pub struct ZTransaction<'catalog> {
    |            ------------ fields in this struct
...
224 |     catalog: &'catalog Catalog<'catalog>,
    |     ^^^^^^^
225 |     /// Organization ID for scoped SQL operations
226 |     org_id: u64,
    |     ^^^^^^
...
236 |     savepoints: parking_lot::RwLock<Vec<String>>,
    |     ^^^^^^^^^^

warning: field `started_at` is never read
   --> crates/ztransaction/src/distributed/two_phase_commit.rs:150:9
    |
136 | struct TransactionState {
    |        ---------------- field in this struct
...
150 |     pub started_at: DateTime<Utc>,
    |         ^^^^^^^^^^
    |
    = note: `TransactionState` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `connection_url` is never read
   --> crates/ztransaction/src/distributed/participants.rs:317:5
    |
315 | pub struct WebSocketParticipant {
    |            -------------------- field in this struct
316 |     id: ParticipantId,
317 |     connection_url: String,
    |     ^^^^^^^^^^^^^^
    |
    = note: `WebSocketParticipant` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `config` is never read
   --> crates/ztransaction/src/distributed/conflict_resolution.rs:339:5
    |
327 | pub struct ConflictResolver {
    |            ---------------- field in this struct
...
339 |     config: ConflictResolutionConfig,
    |     ^^^^^^

warning: `zmesh-network` (lib) generated 24 warnings
warning: `ztransaction` (lib) generated 28 warnings (run `cargo clippy --fix --lib -p ztransaction` to apply 22 suggestions)
warning: field `metrics` is never read
   --> crates/zauth/src/lib.rs:357:5
    |
354 | pub struct AuthService<'a> {
    |            ----------- field in this struct
...
357 |     metrics: Option<Arc<dyn AuthMetrics>>,
    |     ^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: field `bloom_filter` is never read
  --> crates/zauth/src/session_security.rs:26:5
   |
21 | pub struct SessionSecurityMonitor {
   |            ---------------------- field in this struct
...
26 |     bloom_filter: Arc<BloomFilter>,
   |     ^^^^^^^^^^^^
   |
   = note: `SessionSecurityMonitor` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: field `known_bad_ips` is never read
   --> crates/zauth/src/session_security.rs:595:5
    |
594 | pub struct ThreatIntelligence {
    |            ------------------ field in this struct
595 |     known_bad_ips: HashSet<String>,
    |     ^^^^^^^^^^^^^
    |
    = note: `ThreatIntelligence` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `key_manager` is never read
  --> crates/zauth/src/biometric/privacy.rs:28:5
   |
26 | pub struct HomomorphicMatchingEngine {
   |            ------------------------- field in this struct
27 |     encryption_params: HomomorphicParameters,
28 |     key_manager: HomomorphicKeyManager,
   |     ^^^^^^^^^^^

warning: fields `proof_systems` and `commitment_schemes` are never read
  --> crates/zauth/src/biometric/privacy.rs:33:5
   |
32 | pub struct ZeroKnowledgeProver {
   |            ------------------- fields in this struct
33 |     proof_systems: HashMap<String, Box<dyn ZKProofSystem>>,
   |     ^^^^^^^^^^^^^
34 |     commitment_schemes: HashMap<String, CommitmentScheme>,
   |     ^^^^^^^^^^^^^^^^^^

warning: field `noise_generators` is never read
  --> crates/zauth/src/biometric/privacy.rs:39:5
   |
38 | pub struct DifferentialPrivacyEngine {
   |            ------------------------- field in this struct
39 |     noise_generators: HashMap<String, NoiseGenerator>,
   |     ^^^^^^^^^^^^^^^^

warning: fields `public_key`, `secret_key`, and `evaluation_keys` are never read
   --> crates/zauth/src/biometric/privacy.rs:816:5
    |
815 | pub struct HomomorphicKeyManager {
    |            --------------------- fields in this struct
816 |     public_key: Vec<u8>,
    |     ^^^^^^^^^^
817 |     secret_key: Vec<u8>,
    |     ^^^^^^^^^^
818 |     evaluation_keys: Vec<u8>,
    |     ^^^^^^^^^^^^^^^

warning: field `decision_policies` is never read
  --> crates/zauth/src/biometric/matching.rs:99:5
   |
98 | pub struct DecisionEngine {
   |            -------------- field in this struct
99 |     decision_policies: HashMap<String, DecisionPolicy>,
   |     ^^^^^^^^^^^^^^^^^

warning: fields `id` and `quality` are never read
   --> crates/zauth/src/biometric/keys.rs:639:5
    |
638 | struct MinutiaPoint {
    |        ------------ fields in this struct
639 |     id: u32,
    |     ^^
...
644 |     quality: f64,
    |     ^^^^^^^
    |
    = note: `MinutiaPoint` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `key_manager`, `secure_operations`, and `attestation_service` are never read
  --> crates/zauth/src/biometric/hsm.rs:13:5
   |
11 | pub struct BiometricHSMIntegration {
   |            ----------------------- fields in this struct
12 |     hsm_connector: Arc<dyn HSMConnector>,
13 |     key_manager: HSMKeyManager,
   |     ^^^^^^^^^^^
14 |     secure_operations: HSMSecureOperations,
   |     ^^^^^^^^^^^^^^^^^
15 |     attestation_service: HSMAttestationService,
   |     ^^^^^^^^^^^^^^^^^^^

warning: field `attestation_keys` is never read
   --> crates/zauth/src/biometric/hsm.rs:201:5
    |
200 | pub struct HSMAttestationService {
    |            --------------------- field in this struct
201 |     attestation_keys: HashMap<String, Vec<u8>>,
    |     ^^^^^^^^^^^^^^^^

warning: field `issuer` is never read
   --> crates/zauth/src/biometric/hsm.rs:207:5
    |
206 | struct TrustAnchor {
    |        ----------- field in this struct
207 |     issuer: String,
    |     ^^^^^^
    |
    = note: `TrustAnchor` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `challenge_id` and `attestation` are never read
   --> crates/zauth/src/biometric/hsm.rs:826:5
    |
825 | struct HSMChallenge {
    |        ------------ fields in this struct
826 |     challenge_id: Ulid,
    |     ^^^^^^^^^^^^
...
829 |     attestation: AttestationProof,
    |     ^^^^^^^^^^^
    |
    = note: `HSMChallenge` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `key_id`, `hsm_handle`, and `access_policy` are never read
   --> crates/zauth/src/biometric/hsm.rs:919:5
    |
918 | struct HSMVaultKey {
    |        ----------- fields in this struct
919 |     key_id: Ulid,
    |     ^^^^^^
920 |     hsm_handle: u64,
    |     ^^^^^^^^^^
921 |     access_policy: VaultAccessPolicy,
    |     ^^^^^^^^^^^^^
    |
    = note: `HSMVaultKey` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: fields `required_authentication_level`, `allowed_operations`, and `usage_limits` are never read
   --> crates/zauth/src/biometric/hsm.rs:926:5
    |
925 | pub struct VaultAccessPolicy {
    |            ----------------- fields in this struct
926 |     required_authentication_level: u8,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
927 |     allowed_operations: Vec<VaultOperation>,
    |     ^^^^^^^^^^^^^^^^^^
928 |     usage_limits: HashMap<VaultOperation, u32>,
    |     ^^^^^^^^^^^^
    |
    = note: `VaultAccessPolicy` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: variants `Store`, `Retrieve`, `Match`, and `Delete` are never constructed
   --> crates/zauth/src/biometric/hsm.rs:933:5
    |
932 | enum VaultOperation {
    |      -------------- variants in this enum
933 |     Store,
    |     ^^^^^
934 |     Retrieve,
    |     ^^^^^^^^
935 |     Match,
    |     ^^^^^
936 |     Delete,
    |     ^^^^^^
    |
    = note: `VaultOperation` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `privacy_system` is never read
  --> crates/zauth/src/biometric/api.rs:18:5
   |
13 | pub struct BiometricApi {
   |            ------------ field in this struct
...
18 |     privacy_system: PrivacyPreservingBiometricSystem,
   |     ^^^^^^^^^^^^^^

warning: field `quality_assessor` is never read
  --> crates/zauth/src/biometric/multimodal.rs:18:5
   |
16 | pub struct MultimodalFusionEngine {
   |            ---------------------- field in this struct
17 |     fusion_strategies: HashMap<String, Box<dyn MultimodalFusionStrategy>>,
18 |     quality_assessor: QualityBasedFusion,
   |     ^^^^^^^^^^^^^^^^

warning: fields `quality_thresholds` and `quality_weights` are never read
   --> crates/zauth/src/biometric/multimodal.rs:126:5
    |
125 | pub struct QualityBasedFusion {
    |            ------------------ fields in this struct
126 |     quality_thresholds: HashMap<BiometricModality, f64>,
    |     ^^^^^^^^^^^^^^^^^^
127 |     quality_weights: HashMap<BiometricModality, f64>,
    |     ^^^^^^^^^^^^^^^

warning: fields `learning_rate` and `adaptation_window` are never read
   --> crates/zauth/src/biometric/multimodal.rs:133:5
    |
131 | pub struct AdaptiveWeighting {
    |            ----------------- fields in this struct
132 |     user_profiles: HashMap<Ulid, UserBiometricProfile>,
133 |     learning_rate: f64,
    |     ^^^^^^^^^^^^^
134 |     adaptation_window: usize,
    |     ^^^^^^^^^^^^^^^^^

warning: field `decision_policies` is never read
   --> crates/zauth/src/biometric/multimodal.rs:170:5
    |
169 | pub struct MultimodalDecisionEngine {
    |            ------------------------ field in this struct
170 |     decision_policies: HashMap<String, MultimodalDecisionPolicy>,
    |     ^^^^^^^^^^^^^^^^^

warning: fields `risk_models` and `threat_intelligence` are never read
   --> crates/zauth/src/biometric/multimodal.rs:227:5
    |
226 | pub struct RiskAssessmentEngine {
    |            -------------------- fields in this struct
227 |     risk_models: HashMap<String, Box<dyn RiskModel>>,
    |     ^^^^^^^^^^^
228 |     threat_intelligence: ThreatIntelligenceService,
    |     ^^^^^^^^^^^^^^^^^^^

warning: fields `performance_metrics` and `user_satisfaction` are never read
   --> crates/zauth/src/biometric/multimodal.rs:390:5
    |
389 | pub struct MultimodalPerformanceMonitor {
    |            ---------------------------- fields in this struct
390 |     performance_metrics: HashMap<String, MultimodalPerformanceMetrics>,
    |     ^^^^^^^^^^^^^^^^^^^
391 |     user_satisfaction: HashMap<Ulid, UserSatisfactionMetrics>,
    |     ^^^^^^^^^^^^^^^^^

warning: fields `threat_feeds`, `attack_patterns`, and `ip_reputation` are never read
   --> crates/zauth/src/biometric/multimodal.rs:449:5
    |
448 | pub struct ThreatIntelligenceService {
    |            ------------------------- fields in this struct
449 |     threat_feeds: Vec<ThreatFeed>,
    |     ^^^^^^^^^^^^
450 |     attack_patterns: HashMap<String, AttackPattern>,
    |     ^^^^^^^^^^^^^^^
451 |     ip_reputation: HashMap<String, IPReputation>,
    |     ^^^^^^^^^^^^^

warning: field `store` is never read
  --> crates/zauth/src/identity_permissions.rs:19:5
   |
17 | pub struct IdentityAwarePermissionService<'store> {
   |            ------------------------------ field in this struct
18 |     permission_service: PermissionService<'store>,
19 |     store: &'store Store,
   |     ^^^^^
   |
   = note: `IdentityAwarePermissionService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: fields `credential_service` and `attestation_service` are never read
  --> crates/zauth/src/hardware_session_context.rs:22:5
   |
20 | pub struct HardwareSessionContextService {
   |            ----------------------------- fields in this struct
21 |     store: &'static Store,
22 |     credential_service: CredentialVerificationService,
   |     ^^^^^^^^^^^^^^^^^^
23 |     attestation_service: DeviceAttestationService,
   |     ^^^^^^^^^^^^^^^^^^^
   |
   = note: `HardwareSessionContextService` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: methods `challenge_tpm` and `validate_secure_boot_state` are never used
   --> crates/zauth/src/hardware_session_context.rs:347:14
    |
 26 | impl HardwareSessionContextService {
    | ---------------------------------- methods in this implementation
...
347 |     async fn challenge_tpm(&self, _challenge_data: &[u8]) -> Result<TmpChallengeResult> {
    |              ^^^^^^^^^^^^^
...
355 |     async fn validate_secure_boot_state(&self) -> Result<bool> {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: field `details` is never read
   --> crates/zauth/src/hardware_session_context.rs:531:5
    |
528 | struct HardwareVerificationResult {
    |        -------------------------- field in this struct
...
531 |     details: String,
    |     ^^^^^^^
    |
    = note: `HardwareVerificationResult` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `enclave_id` is never read
   --> crates/zauth/src/hardware_session_context.rs:539:5
    |
535 | struct SecureEnclaveVerificationResult {
    |        ------------------------------- field in this struct
...
539 |     enclave_id: String,
    |     ^^^^^^^^^^
    |
    = note: `SecureEnclaveVerificationResult` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: field `tmp_version` is never read
   --> crates/zauth/src/hardware_session_context.rs:547:5
    |
543 | struct TmpVerificationResult {
    |        --------------------- field in this struct
...
547 |     tmp_version: String,
    |     ^^^^^^^^^^^
    |
    = note: `TmpVerificationResult` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: struct `TmpChallengeResult` is never constructed
   --> crates/zauth/src/hardware_session_context.rs:551:8
    |
551 | struct TmpChallengeResult {
    |        ^^^^^^^^^^^^^^^^^^

warning: `zauth` (lib) generated 31 warnings
    Checking zevents v0.1.0 (/home/zach/github/ZDB/crates/zevents)
warning: unused import: `VecDeque`
 --> crates/zevents/src/batching.rs:7:33
  |
7 | use std::collections::{HashMap, VecDeque};
  |                                 ^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `Mutex`
  --> crates/zevents/src/batching.rs:10:25
   |
10 | use tokio::sync::{mpsc, Mutex};
   |                         ^^^^^

warning: unused import: `EventId`
  --> crates/zevents/src/batching.rs:14:20
   |
14 | use crate::{Event, EventId};
   |                    ^^^^^^^

warning: unused import: `crate::events::Event`
 --> crates/zevents/src/consumer.rs:1:5
  |
1 | use crate::events::Event;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::collections::HashSet`
 --> crates/zevents/src/consumer.rs:6:5
  |
6 | use std::collections::HashSet;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `HandlerResult`
 --> crates/zevents/src/exactly_once_bus.rs:2:37
  |
2 | use crate::handlers::{EventHandler, HandlerResult};
  |                                     ^^^^^^^^^^^^^

warning: unused import: `PersistentConsumer`
 --> crates/zevents/src/exactly_once_bus.rs:4:23
  |
4 | use crate::consumer::{PersistentConsumer, ConsumerConfig, ConsumerGroup, ConsumerStats};
  |                       ^^^^^^^^^^^^^^^^^^

warning: unused import: `anyhow::Result`
  --> crates/zevents/src/filtering.rs:10:5
   |
10 | use anyhow::Result;
   |     ^^^^^^^^^^^^^^

warning: unused import: `anyhow::Result`
 --> crates/zevents/src/metrics.rs:1:5
  |
1 | use anyhow::Result;
  |     ^^^^^^^^^^^^^^

warning: unused import: `info`
 --> crates/zevents/src/metrics.rs:7:22
  |
7 | use tracing::{debug, info, warn};
  |                      ^^^^

warning: unused import: `EventId`
 --> crates/zevents/src/transaction.rs:1:39
  |
1 | use crate::events::{Event, EventData, EventId, EventMetadata, EventType};
  |                                       ^^^^^^^

warning: unused imports: `DateTime` and `Utc`
 --> crates/zevents/src/unified_streaming.rs:2:14
  |
2 | use chrono::{DateTime, Utc, Timelike};
  |              ^^^^^^^^  ^^^

warning: unused import: `error`
 --> crates/zevents/src/unified_streaming.rs:7:34
  |
7 | use tracing::{debug, info, warn, error};
  |                                  ^^^^^

warning: unused import: `uuid::Uuid`
 --> crates/zevents/src/unified_streaming.rs:8:5
  |
8 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused import: `HandlerResult`
  --> crates/zevents/src/unified_streaming.rs:11:37
   |
11 | use crate::handlers::{EventHandler, HandlerResult};
   |                                     ^^^^^^^^^^^^^

warning: unused import: `crate::transaction::TransactionEventManager`
  --> crates/zevents/src/unified_streaming.rs:13:5
   |
13 | use crate::transaction::TransactionEventManager;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `sub_id`
   --> crates/zevents/src/bus.rs:387:30
    |
387 |                         for (sub_id, subscription) in subs.iter() {
    |                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_sub_id`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `sub_id`
   --> crates/zevents/src/bus.rs:408:30
    |
408 |                         for (sub_id, subscription) in persistent_subs.iter() {
    |                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_sub_id`

warning: unused variable: `dead_letter`
   --> crates/zevents/src/bus.rs:444:13
    |
444 |         let dead_letter = self.dead_letter.clone();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_dead_letter`

warning: unused variable: `e`
   --> crates/zevents/src/consumer.rs:282:32
    |
282 |                     if let Err(e) = timeout(Duration::from_secs(1), self.queue.wait_for_messages()).await {
    |                                ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `message_ids`
   --> crates/zevents/src/exactly_once_bus.rs:329:52
    |
329 |     pub async fn retry_dead_letter_messages(&self, message_ids: Vec<String>) -> Result<usize> {
    |                                                    ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_message_ids`

warning: unused variable: `p50`
   --> crates/zevents/src/metrics.rs:700:14
    |
700 |         let (p50, p95, p99) = latency_tracker.calculate_percentiles();
    |              ^^^ help: if this is intentional, prefix it with an underscore: `_p50`

warning: unused variable: `key`
   --> crates/zevents/src/persistent_queue.rs:634:18
    |
634 |             let (key, value) = result?;
    |                  ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `event_data`
   --> crates/zevents/src/scheduler.rs:727:9
    |
727 |         event_data: &serde_json::Value,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_event_data`

warning: value assigned to `removed_count` is never read
   --> crates/zevents/src/scheduler.rs:778:25
    |
778 |                 let mut removed_count = 0;
    |                         ^^^^^^^^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: unused variable: `key`
   --> crates/zevents/src/sourcing.rs:312:18
    |
312 |             let (key, value) = result?;
    |                  ^^^ help: if this is intentional, prefix it with an underscore: `_key`

warning: unused variable: `start_time`
   --> crates/zevents/src/triggers.rs:830:13
    |
830 |         let start_time = std::time::Instant::now();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_time`

warning: unused variable: `event_data`
   --> crates/zevents/src/triggers.rs:885:52
    |
885 |             TriggerAction::EmitEvent { event_type, event_data } => {
    |                                                    ^^^^^^^^^^ help: try ignoring the field: `event_data: _`

warning: unused variable: `parameters`
   --> crates/zevents/src/triggers.rs:924:61
    |
924 |             TriggerAction::ExecuteFunction { function_name, parameters } => {
    |                                                             ^^^^^^^^^^ help: try ignoring the field: `parameters: _`

warning: unused variable: `stream_id`
   --> crates/zevents/src/unified_streaming.rs:960:46
    |
960 |     async fn generate_sequence_number(&self, stream_id: &str) -> u64 {
    |                                              ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_stream_id`

warning: unused variable: `event`
    --> crates/zevents/src/unified_streaming.rs:1069:33
     |
1069 |     async fn route_event(&self, event: &Event) -> Vec<String> {
     |                                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_event`

warning: unused import: `EventHandler`
  --> crates/zevents/src/unified_streaming.rs:11:23
   |
11 | use crate::handlers::{EventHandler, HandlerResult};
   |                       ^^^^^^^^^^^^

warning: unused variable: `event_topic`
   --> crates/zevents/src/bus.rs:514:13
    |
514 |         let event_topic = event.to_topic();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_event_topic`

warning: unused variable: `event_topic`
   --> crates/zevents/src/hooks.rs:118:13
    |
118 |         let event_topic = event.to_topic();
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_event_topic`

warning: unused variable: `current`
   --> crates/zevents/src/metrics.rs:285:17
    |
285 |             let current = &mut self.time_windows[self.current_window];
    |                 ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_current`

warning: unused variable: `from`
  --> crates/zevents/src/scheduler.rs:95:38
   |
95 |     pub fn calculate_next_run(&self, from: DateTime<Utc>) -> Result<Option<DateTime<Utc>>> {
   |                                      ^^^^ help: if this is intentional, prefix it with an underscore: `_from`

warning: unused variable: `event_topic`
  --> crates/zevents/src/sourcing.rs:99:17
   |
99 |             let event_topic = event.to_topic();
   |                 ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_event_topic`

warning: unused variable: `metrics_collector`
   --> crates/zevents/src/unified_streaming.rs:650:16
    |
650 |     pub fn new(metrics_collector: Arc<EventMetricsCollector>) -> Self {
    |                ^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_metrics_collector`

warning: field `storage` is never read
  --> crates/zevents/src/lib.rs:74:5
   |
65 | pub struct EventSystem {
   |            ----------- field in this struct
...
74 |     storage: Arc<Store>,
   |     ^^^^^^^
   |
   = note: `EventSystem` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis
   = note: `#[warn(dead_code)]` on by default

warning: field `handler` is never read
   --> crates/zevents/src/batching.rs:100:5
    |
 98 | pub struct EventBatcher {
    |            ------------ field in this struct
 99 |     config: BatchConfig,
100 |     handler: Arc<dyn BatchHandler>,
    |     ^^^^^^^

warning: fields `event_id` and `subscription_id` are never read
   --> crates/zevents/src/bus.rs:116:5
    |
114 | struct DeliveryTrack {
    |        ------------- fields in this struct
115 |     /// Event ID being delivered
116 |     event_id: String,
    |     ^^^^^^^^
117 |     /// Subscription ID
118 |     subscription_id: String,
    |     ^^^^^^^^^^^^^^^
    |
    = note: `DeliveryTrack` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: struct `ProcessingState` is never constructed
  --> crates/zevents/src/consumer.rs:63:8
   |
63 | struct ProcessingState {
   |        ^^^^^^^^^^^^^^^

warning: field `event_store` is never read
  --> crates/zevents/src/integration.rs:20:5
   |
18 | pub struct DatabaseChangeIntegration {
   |            ------------------------- field in this struct
19 |     event_bus: Arc<EventBus>,
20 |     event_store: Arc<EventStore>,
   |     ^^^^^^^^^^^

warning: field `org_id` is never read
   --> crates/zevents/src/metrics.rs:739:5
    |
735 | pub struct EventProcessingHandle {
    |            --------------------- field in this struct
...
739 |     org_id: u64,
    |     ^^^^^^

warning: fields `integrations`, `transformation_rules`, and `integration_health` are never read
  --> crates/zevents/src/unified_streaming.rs:44:5
   |
42 | pub struct CrossSystemIntegrationManager {
   |            ----------------------------- fields in this struct
43 |     /// Integration endpoints for different systems
44 |     integrations: Arc<RwLock<HashMap<String, Arc<dyn SystemIntegration>>>>,
   |     ^^^^^^^^^^^^
45 |     /// Event transformation rules
46 |     transformation_rules: Arc<RwLock<HashMap<String, Vec<TransformationRule>>>>,
   |     ^^^^^^^^^^^^^^^^^^^^
47 |     /// Integration health status
48 |     integration_health: Arc<RwLock<HashMap<String, IntegrationHealth>>>,
   |     ^^^^^^^^^^^^^^^^^^

warning: fields `routing_rules`, `topic_routes`, `content_filters`, and `load_balancer` are never read
  --> crates/zevents/src/unified_streaming.rs:54:5
   |
52 | pub struct StreamRouter {
   |            ------------ fields in this struct
53 |     /// Routing rules by event type
54 |     routing_rules: Arc<RwLock<HashMap<EventType, Vec<RoutingRule>>>>,
   |     ^^^^^^^^^^^^^
55 |     /// Topic-based routing
56 |     topic_routes: Arc<RwLock<HashMap<String, Vec<String>>>>, // topic pattern -> stream IDs
   |     ^^^^^^^^^^^^
57 |     /// Content-based routing
58 |     content_filters: Arc<RwLock<Vec<ContentBasedRoute>>>,
   |     ^^^^^^^^^^^^^^^
59 |     /// Load balancing configuration
60 |     load_balancer: Arc<RwLock<LoadBalancerConfig>>,
   |     ^^^^^^^^^^^^^

warning: field `strategies` is never read
  --> crates/zevents/src/unified_streaming.rs:70:5
   |
64 | pub struct DeduplicationService {
   |            -------------------- field in this struct
...
70 |     strategies: Arc<RwLock<HashMap<String, DeduplicationStrategy>>>,
   |     ^^^^^^^^^^

warning: fields `health_thresholds` and `check_interval_seconds` are never read
  --> crates/zevents/src/unified_streaming.rs:78:5
   |
74 | pub struct StreamHealthMonitor {
   |            ------------------- fields in this struct
...
78 |     health_thresholds: Arc<RwLock<HealthThresholds>>,
   |     ^^^^^^^^^^^^^^^^^
79 |     /// Health check interval
80 |     check_interval_seconds: u64,
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: `zevents` (lib) generated 48 warnings (run `cargo clippy --fix --lib -p zevents` to apply 16 suggestions)
    Checking zexec-engine v0.1.0 (/home/zach/github/ZDB/crates/zexec-engine)
    Checking zidentity v0.1.0 (/home/zach/github/ZDB/crates/zidentity)
error[E0252]: the name `UniformRand` is defined multiple times
 --> crates/zidentity/src/bbs_plus/keys.rs:9:40
  |
7 | use ark_ff::{Field, PrimeField, One, Zero, UniformRand};
  |                                            ----------- previous import of the trait `UniformRand` here
8 | use ark_serialize::{CanonicalSerialize, CanonicalDeserialize};
9 | use ark_std::{vec::Vec, rand::RngCore, UniformRand};
  |                                        ^^^^^^^^^^^ `UniformRand` reimported here
  |
  = note: `UniformRand` must be defined only once in the type namespace of this module

error[E0252]: the name `UniformRand` is defined multiple times
  --> crates/zidentity/src/bbs_plus/signature.rs:12:40
   |
10 | use ark_ff::{Field, PrimeField, One, Zero, UniformRand};
   |                                            ----------- previous import of the trait `UniformRand` here
11 | use ark_serialize::{CanonicalSerialize, CanonicalDeserialize};
12 | use ark_std::{vec::Vec, rand::RngCore, UniformRand};
   |                                        ^^^^^^^^^^^ `UniformRand` reimported here
   |
   = note: `UniformRand` must be defined only once in the type namespace of this module

error: cannot find macro `info` in this scope
  --> crates/zidentity/src/biometric_auth.rs:87:9
   |
87 |         info!("Initializing biometric authentication service with real processors");
   |         ^^^^
   |
help: consider importing this macro
   |
 3 + use tracing::info;
   |

error: cannot find macro `info` in this scope
   --> crates/zidentity/src/biometric_auth.rs:116:9
    |
116 |         info!("Enrolling biometric template for user {} with modality {:?}", user_id, modality);
    |         ^^^^
    |
help: consider importing this macro
    |
  3 + use tracing::info;
    |

error: cannot find macro `info` in this scope
   --> crates/zidentity/src/biometric_auth.rs:137:9
    |
137 |         info!("Successfully enrolled biometric template {} with quality score {:.3}",
    |         ^^^^
    |
help: consider importing this macro
    |
  3 + use tracing::info;
    |

error: cannot find macro `info` in this scope
   --> crates/zidentity/src/biometric_auth.rs:149:9
    |
149 |         info!("Verifying biometric data against template {}", template_id);
    |         ^^^^
    |
help: consider importing this macro
    |
  3 + use tracing::info;
    |

error: cannot find macro `info` in this scope
   --> crates/zidentity/src/biometric_auth.rs:173:9
    |
173 |         info!("Verification result for template {}: verified={}, confidence={:.3}",
    |         ^^^^
    |
help: consider importing this macro
    |
  3 + use tracing::info;
    |

error: cannot find macro `info` in this scope
   --> crates/zidentity/src/biometric_auth.rs:181:9
    |
181 |         info!("Deleting biometric template {}", template_id);
    |         ^^^^
    |
help: consider importing this macro
    |
  3 + use tracing::info;
    |

error: cannot find macro `info` in this scope
   --> crates/zidentity/src/biometric_auth.rs:185:13
    |
185 |             info!("Successfully deleted template {}", template_id);
    |             ^^^^
    |
help: consider importing this macro
    |
  3 + use tracing::info;
    |

error: cannot find macro `debug` in this scope
   --> crates/zidentity/src/biometric_auth.rs:213:9
    |
213 |         debug!("Processing face enrollment for user {}", user_id);
    |         ^^^^^
    |
help: consider importing this macro
    |
  3 + use tracing::debug;
    |

error: cannot find macro `debug` in this scope
   --> crates/zidentity/src/biometric_auth.rs:260:9
    |
260 |         debug!("Processing voice enrollment for user {}", user_id);
    |         ^^^^^
    |
help: consider importing this macro
    |
  3 + use tracing::debug;
    |

error: cannot find macro `debug` in this scope
   --> crates/zidentity/src/biometric_auth.rs:311:9
    |
311 |         debug!("Processing fingerprint enrollment for user {}", user_id);
    |         ^^^^^
    |
help: consider importing this macro
    |
  3 + use tracing::debug;
    |

error: cannot find macro `debug` in this scope
   --> crates/zidentity/src/biometric_auth.rs:357:9
    |
357 |         debug!("Verifying face against template {}", stored_template.id);
    |         ^^^^^
    |
help: consider importing this macro
    |
  3 + use tracing::debug;
    |

error: cannot find macro `debug` in this scope
   --> crates/zidentity/src/biometric_auth.rs:401:9
    |
401 |         debug!("Verifying voice against template {}", stored_template.id);
    |         ^^^^^
    |
help: consider importing this macro
    |
  3 + use tracing::debug;
    |

error: cannot find macro `debug` in this scope
   --> crates/zidentity/src/biometric_auth.rs:445:9
    |
445 |         debug!("Verifying fingerprint against template {}", stored_template.id);
    |         ^^^^^
    |
help: consider importing this macro
    |
  3 + use tracing::debug;
    |

warning: unused import: `encode_key`
   --> crates/zidentity/src/models.rs:321:21
    |
321 | use zcore_storage::{encode_key, composite_key};
    |                     ^^^^^^^^^^
    |
    = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `COL_IDENTITY_CREDENTIAL_PROOFS` and `COL_IDENTITY_SELECTIVE_DISCLOSURE`
  --> crates/zidentity/src/repository.rs:9:5
   |
 9 |     COL_IDENTITY_CREDENTIAL_PROOFS, COL_IDENTITY_VERIFICATION_POLICIES,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
13 |     COL_IDENTITY_DID_DOCUMENTS, COL_IDENTITY_SELECTIVE_DISCLOSURE,
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `anyhow::Result`
 --> crates/zidentity/src/identity_service.rs:1:5
  |
1 | use anyhow::Result;
  |     ^^^^^^^^^^^^^^

warning: unused import: `DateTime`
 --> crates/zidentity/src/identity_service.rs:2:14
  |
2 | use chrono::{DateTime, Utc};
  |              ^^^^^^^^

warning: unexpected `cfg` condition value: `crypto-impl`
 --> crates/zidentity/src/crypto.rs:9:7
  |
9 | #[cfg(feature = "crypto-impl")]
  |       ^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: expected values for `feature` are: `android-biometric`, `android-keystore`, `anti-spoofing`, `apodize`, `audio-processing`, `avx2`, `biometric-auth`, `bmi2`, `candle-core`, `candle-nn`, `candle-transformers`, `computer-vision`, `constant-time`, `cpal`, `default`, `device-attestation`, `dsp`, `face-id`, `fingerprint-analysis`, `hardware-security`, `hound`, `hsm`, `insecure-dev`, `jni`, `liveness-detection`, `mobile-optimized`, `mock-hardware`, `ndk`, `ndk-sys`, `neon`, `opencv`, `openssl`, `ort`, `real-biometrics`, and `rubato` and 12 more
  = help: consider adding `crypto-impl` as a feature in `Cargo.toml`
  = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration
  = note: `#[warn(unexpected_cfgs)]` on by default

warning: unexpected `cfg` condition value: `crypto-impl`
  --> crates/zidentity/src/crypto.rs:17:11
   |
17 | #[cfg(not(feature = "crypto-impl"))]
   |           ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `android-biometric`, `android-keystore`, `anti-spoofing`, `apodize`, `audio-processing`, `avx2`, `biometric-auth`, `bmi2`, `candle-core`, `candle-nn`, `candle-transformers`, `computer-vision`, `constant-time`, `cpal`, `default`, `device-attestation`, `dsp`, `face-id`, `fingerprint-analysis`, `hardware-security`, `hound`, `hsm`, `insecure-dev`, `jni`, `liveness-detection`, `mobile-optimized`, `mock-hardware`, `ndk`, `ndk-sys`, `neon`, `opencv`, `openssl`, `ort`, `real-biometrics`, and `rubato` and 12 more
   = help: consider adding `crypto-impl` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `crypto-impl`
  --> crates/zidentity/src/crypto.rs:42:11
   |
42 | #[cfg(not(feature = "crypto-impl"))]
   |           ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `android-biometric`, `android-keystore`, `anti-spoofing`, `apodize`, `audio-processing`, `avx2`, `biometric-auth`, `bmi2`, `candle-core`, `candle-nn`, `candle-transformers`, `computer-vision`, `constant-time`, `cpal`, `default`, `device-attestation`, `dsp`, `face-id`, `fingerprint-analysis`, `hardware-security`, `hound`, `hsm`, `insecure-dev`, `jni`, `liveness-detection`, `mobile-optimized`, `mock-hardware`, `ndk`, `ndk-sys`, `neon`, `opencv`, `openssl`, `ort`, `real-biometrics`, and `rubato` and 12 more
   = help: consider adding `crypto-impl` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `crypto-impl`
  --> crates/zidentity/src/crypto.rs:47:11
   |
47 | #[cfg(not(feature = "crypto-impl"))]
   |           ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `android-biometric`, `android-keystore`, `anti-spoofing`, `apodize`, `audio-processing`, `avx2`, `biometric-auth`, `bmi2`, `candle-core`, `candle-nn`, `candle-transformers`, `computer-vision`, `constant-time`, `cpal`, `default`, `device-attestation`, `dsp`, `face-id`, `fingerprint-analysis`, `hardware-security`, `hound`, `hsm`, `insecure-dev`, `jni`, `liveness-detection`, `mobile-optimized`, `mock-hardware`, `ndk`, `ndk-sys`, `neon`, `opencv`, `openssl`, `ort`, `real-biometrics`, and `rubato` and 12 more
   = help: consider adding `crypto-impl` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unexpected `cfg` condition value: `crypto-impl`
  --> crates/zidentity/src/crypto.rs:69:11
   |
69 | #[cfg(not(feature = "crypto-impl"))]
   |           ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: expected values for `feature` are: `android-biometric`, `android-keystore`, `anti-spoofing`, `apodize`, `audio-processing`, `avx2`, `biometric-auth`, `bmi2`, `candle-core`, `candle-nn`, `candle-transformers`, `computer-vision`, `constant-time`, `cpal`, `default`, `device-attestation`, `dsp`, `face-id`, `fingerprint-analysis`, `hardware-security`, `hound`, `hsm`, `insecure-dev`, `jni`, `liveness-detection`, `mobile-optimized`, `mock-hardware`, `ndk`, `ndk-sys`, `neon`, `opencv`, `openssl`, `ort`, `real-biometrics`, and `rubato` and 12 more
   = help: consider adding `crypto-impl` as a feature in `Cargo.toml`
   = note: see <https://doc.rust-lang.org/nightly/rustc/check-cfg/cargo-specifics.html> for more information about checking conditional configuration

warning: unused import: `Signer`
   --> crates/zidentity/src/crypto.rs:148:49
    |
148 |         use ed25519_dalek::{Keypair, Signature, Signer};
    |                                                 ^^^^^^

warning: unused import: `Zeroize`
 --> crates/zidentity/src/proofs.rs:7:15
  |
7 | use zeroize::{Zeroize, ZeroizeOnDrop};
  |               ^^^^^^^

warning: unused import: `Field`
  --> crates/zidentity/src/proofs.rs:11:14
   |
11 | use ark_ff::{Field, PrimeField, One, Zero};
   |              ^^^^^

warning: unused import: `Group`
  --> crates/zidentity/src/proofs.rs:12:14
   |
12 | use ark_ec::{Group};
   |              ^^^^^

warning: unused import: `CanonicalDeserialize`
  --> crates/zidentity/src/proofs.rs:13:41
   |
13 | use ark_serialize::{CanonicalSerialize, CanonicalDeserialize};
   |                                         ^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `DisclosurePattern` and `SelectiveDisclosureProof`
  --> crates/zidentity/src/proofs.rs:21:16
   |
21 |     bbs_plus::{SelectiveDisclosureProof, DisclosurePattern},
   |                ^^^^^^^^^^^^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^

warning: unused import: `AtomicUsize`
 --> crates/zidentity/src/cache.rs:6:36
  |
6 | use std::sync::atomic::{AtomicU64, AtomicUsize, Ordering};
  |                                    ^^^^^^^^^^^

warning: unused imports: `DateTime` and `Utc`
  --> crates/zidentity/src/cache.rs:11:14
   |
11 | use chrono::{DateTime, Utc};
   |              ^^^^^^^^  ^^^

warning: unused import: `anyhow::Result`
  --> crates/zidentity/src/cache.rs:14:5
   |
14 | use anyhow::Result;
   |     ^^^^^^^^^^^^^^

warning: unused imports: `Deserialize` and `Serialize`
  --> crates/zidentity/src/cache.rs:15:13
   |
15 | use serde::{Deserialize, Serialize};
   |             ^^^^^^^^^^^  ^^^^^^^^^

warning: unused import: `ProofFormat`
  --> crates/zidentity/src/cache.rs:17:74
   |
17 | use crate::{VerificationKey, ZkProof, CachedZkProof, CredentialMetadata, ProofFormat};
   |                                                                          ^^^^^^^^^^^

warning: unused import: `AtomicUsize`
 --> crates/zidentity/src/metrics.rs:6:36
  |
6 | use std::sync::atomic::{AtomicU64, AtomicUsize, Ordering};
  |                                    ^^^^^^^^^^^

warning: unused import: `Mutex`
  --> crates/zidentity/src/metrics.rs:10:27
   |
10 | use parking_lot::{RwLock, Mutex};
   |                           ^^^^^

warning: unused import: `IdentityError`
 --> crates/zidentity/src/security_audit.rs:1:13
  |
1 | use crate::{IdentityError, IdentityResult};
  |             ^^^^^^^^^^^^^

warning: unused import: `HashSet`
 --> crates/zidentity/src/security_audit.rs:2:33
  |
2 | use std::collections::{HashMap, HashSet};
  |                                 ^^^^^^^

warning: unused imports: `error` and `warn`
 --> crates/zidentity/src/security_audit.rs:5:21
  |
5 | use tracing::{info, warn, error};
  |                     ^^^^  ^^^^^

warning: unused import: `sleep`
 --> crates/zidentity/src/security_audit.rs:6:29
  |
6 | use tokio::time::{Duration, sleep};
  |                             ^^^^^

warning: unused import: `IdentityError`
 --> crates/zidentity/src/monitoring.rs:1:13
  |
1 | use crate::{IdentityError, IdentityResult};
  |             ^^^^^^^^^^^^^

warning: unused imports: `Instant`, `SystemTime`, and `UNIX_EPOCH`
 --> crates/zidentity/src/monitoring.rs:4:27
  |
4 | use std::time::{Duration, Instant, SystemTime, UNIX_EPOCH};
  |                           ^^^^^^^  ^^^^^^^^^^  ^^^^^^^^^^

warning: unused imports: `debug` and `warn`
 --> crates/zidentity/src/monitoring.rs:7:21
  |
7 | use tracing::{info, warn, error, debug};
  |                     ^^^^         ^^^^^

warning: unused import: `mpsc`
 --> crates/zidentity/src/monitoring.rs:8:30
  |
8 | use tokio::sync::{broadcast, mpsc, RwLock as AsyncRwLock};
  |                              ^^^^

warning: unused import: `sleep`
 --> crates/zidentity/src/monitoring.rs:9:38
  |
9 | use tokio::time::{interval, timeout, sleep};
  |                                      ^^^^^

warning: unused import: `IdentityError`
 --> crates/zidentity/src/compliance.rs:1:13
  |
1 | use crate::{IdentityError, IdentityResult};
  |             ^^^^^^^^^^^^^

warning: unused import: `HashSet`
 --> crates/zidentity/src/compliance.rs:2:33
  |
2 | use std::collections::{HashMap, HashSet};
  |                                 ^^^^^^^

warning: unused import: `SystemTime`
 --> crates/zidentity/src/compliance.rs:3:27
  |
3 | use std::time::{Duration, SystemTime};
  |                           ^^^^^^^^^^

warning: unused imports: `error`, `info`, and `warn`
 --> crates/zidentity/src/compliance.rs:6:15
  |
6 | use tracing::{info, warn, error};
  |               ^^^^  ^^^^  ^^^^^

warning: unused import: `IdentityError`
 --> crates/zidentity/src/deployment.rs:1:13
  |
1 | use crate::{IdentityError, IdentityResult};
  |             ^^^^^^^^^^^^^

warning: unused import: `HashSet`
 --> crates/zidentity/src/deployment.rs:2:33
  |
2 | use std::collections::{HashMap, HashSet};
  |                                 ^^^^^^^

warning: unused import: `SystemTime`
 --> crates/zidentity/src/deployment.rs:3:27
  |
3 | use std::time::{Duration, SystemTime};
  |                           ^^^^^^^^^^

warning: unused imports: `PathBuf` and `Path`
 --> crates/zidentity/src/deployment.rs:4:17
  |
4 | use std::path::{Path, PathBuf};
  |                 ^^^^  ^^^^^^^

warning: unused imports: `debug` and `warn`
 --> crates/zidentity/src/deployment.rs:7:21
  |
7 | use tracing::{info, warn, error, debug};
  |                     ^^^^         ^^^^^

warning: unused import: `tokio::process::Command`
 --> crates/zidentity/src/deployment.rs:8:5
  |
8 | use tokio::process::Command;
  |     ^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `File` and `self`
 --> crates/zidentity/src/deployment.rs:9:17
  |
9 | use tokio::fs::{self, File};
  |                 ^^^^  ^^^^

warning: unused import: `tokio::io::AsyncWriteExt`
  --> crates/zidentity/src/deployment.rs:10:5
   |
10 | use tokio::io::AsyncWriteExt;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Curve` and `G1Point`
 --> crates/zidentity/src/bbs_plus/keys.rs:2:44
  |
2 | use super::{BBSPlusParams, SecurityParams, Curve, Scalar, G1Point, G2Point};
  |                                            ^^^^^          ^^^^^^^

warning: unused imports: `Bls12_381` and `Fr`
 --> crates/zidentity/src/bbs_plus/keys.rs:5:21
  |
5 | use ark_bls12_381::{Bls12_381, Fr};
  |                     ^^^^^^^^^  ^^

warning: unused imports: `CurveGroup`, `Group`, and `pairing::Pairing`
 --> crates/zidentity/src/bbs_plus/keys.rs:6:14
  |
6 | use ark_ec::{Group, CurveGroup, pairing::Pairing};
  |              ^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused import: `UniformRand`
 --> crates/zidentity/src/bbs_plus/keys.rs:9:40
  |
9 | use ark_std::{vec::Vec, rand::RngCore, UniformRand};
  |                                        ^^^^^^^^^^^

warning: unused import: `Zeroize`
  --> crates/zidentity/src/bbs_plus/keys.rs:11:15
   |
11 | use zeroize::{Zeroize, ZeroizeOnDrop};
   |               ^^^^^^^

warning: unused import: `Curve`
 --> crates/zidentity/src/bbs_plus/signature.rs:4:5
  |
4 |     Curve, Scalar, G1Point, G2Point,
  |     ^^^^^

warning: unused import: `Fr`
 --> crates/zidentity/src/bbs_plus/signature.rs:8:32
  |
8 | use ark_bls12_381::{Bls12_381, Fr};
  |                                ^^

warning: unused imports: `CurveGroup` and `Group`
 --> crates/zidentity/src/bbs_plus/signature.rs:9:14
  |
9 | use ark_ec::{Group, CurveGroup, pairing::Pairing};
  |              ^^^^^  ^^^^^^^^^^

warning: unused imports: `One` and `PrimeField`
  --> crates/zidentity/src/bbs_plus/signature.rs:10:21
   |
10 | use ark_ff::{Field, PrimeField, One, Zero, UniformRand};
   |                     ^^^^^^^^^^  ^^^

warning: unused import: `UniformRand`
  --> crates/zidentity/src/bbs_plus/signature.rs:12:40
   |
12 | use ark_std::{vec::Vec, rand::RngCore, UniformRand};
   |                                        ^^^^^^^^^^^

warning: unused import: `subtle::ConstantTimeEq`
  --> crates/zidentity/src/bbs_plus/signature.rs:14:5
   |
14 | use subtle::ConstantTimeEq;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Curve` and `G2Point`
 --> crates/zidentity/src/bbs_plus/proof.rs:4:5
  |
4 |     Curve, Scalar, G1Point, G2Point,
  |     ^^^^^                   ^^^^^^^

warning: unused import: `Fr`
 --> crates/zidentity/src/bbs_plus/proof.rs:8:32
  |
8 | use ark_bls12_381::{Bls12_381, Fr};
  |                                ^^

warning: unused imports: `CurveGroup` and `Group`
 --> crates/zidentity/src/bbs_plus/proof.rs:9:14
  |
9 | use ark_ec::{Group, CurveGroup, pairing::Pairing};
  |              ^^^^^  ^^^^^^^^^^

warning: unused imports: `Field` and `One`
  --> crates/zidentity/src/bbs_plus/proof.rs:10:14
   |
10 | use ark_ff::{Field, PrimeField, One, Zero, UniformRand};
   |              ^^^^^              ^^^

warning: unused import: `subtle::ConstantTimeEq`
  --> crates/zidentity/src/bbs_plus/proof.rs:14:5
   |
14 | use subtle::ConstantTimeEq;
   |     ^^^^^^^^^^^^^^^^^^^^^^

warning: unused imports: `Curve`, `DisclosurePattern`, `G1Point`, and `G2Point`
 --> crates/zidentity/src/bbs_plus/batch.rs:4:37
  |
4 |     SecurityParams, EncodedMessage, DisclosurePattern,
  |                                     ^^^^^^^^^^^^^^^^^
...
7 |     Curve, Scalar, G1Point, G2Point,
  |     ^^^^^          ^^^^^^^  ^^^^^^^

warning: unused imports: `Bls12_381` and `Fr`
  --> crates/zidentity/src/bbs_plus/batch.rs:11:21
   |
11 | use ark_bls12_381::{Bls12_381, Fr};
   |                     ^^^^^^^^^  ^^

warning: unused imports: `CurveGroup`, `Group`, and `pairing::Pairing`
  --> crates/zidentity/src/bbs_plus/batch.rs:12:14
   |
12 | use ark_ec::{Group, CurveGroup, pairing::Pairing};
   |              ^^^^^  ^^^^^^^^^^  ^^^^^^^^^^^^^^^^

warning: unused import: `Field`
  --> crates/zidentity/src/bbs_plus/batch.rs:13:14
   |
13 | use ark_ff::{Field, PrimeField};
   |              ^^^^^

warning: unused import: `CurveGroup`
  --> crates/zidentity/src/bbs_plus/mod.rs:16:21
   |
16 | use ark_ec::{Group, CurveGroup};
   |                     ^^^^^^^^^^

warning: unused imports: `Field`, `One`, and `Zero`
  --> crates/zidentity/src/bbs_plus/mod.rs:17:14
   |
17 | use ark_ff::{Field, PrimeField, One, Zero, UniformRand};
   |              ^^^^^              ^^^  ^^^^

warning: unused import: `SecureEnclaveAlgorithm as Algorithm`
   --> crates/zidentity/src/secure_enclave.rs:938:9
    |
938 | pub use SecureEnclaveAlgorithm as Algorithm;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `SecureEnclaveKeyParams as KeyParams`
   --> crates/zidentity/src/secure_enclave.rs:939:9
    |
939 | pub use SecureEnclaveKeyParams as KeyParams;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `SecureEnclaveAttestation as KeyAttestation`
   --> crates/zidentity/src/secure_enclave.rs:940:9
    |
940 | pub use SecureEnclaveAttestation as KeyAttestation;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `uuid::Uuid`
 --> crates/zidentity/src/device_attestation.rs:6:5
  |
6 | use uuid::Uuid;
  |     ^^^^^^^^^^

warning: unused imports: `FaceAnalysis`, `FingerprintAnalysis`, and `VoiceAnalysis`
 --> crates/zidentity/src/biometric_auth.rs:9:5
  |
9 |     FaceAnalysis, VoiceAnalysis, FingerprintAnalysis, SensorData
  |     ^^^^^^^^^^^^  ^^^^^^^^^^^^^  ^^^^^^^^^^^^^^^^^^^

warning: unused import: `Rgb`
 --> crates/zidentity/src/biometric_processors.rs:4:32
  |
4 | use image::{ImageBuffer, Luma, Rgb, RgbImage};
  |                                ^^^

warning: unused imports: `Interpolation` and `translate`
 --> crates/zidentity/src/biometric_processors.rs:5:44
  |
5 | use imageproc::geometric_transformations::{translate, Interpolation};
  |                                            ^^^^^^^^^  ^^^^^^^^^^^^^

warning: unused import: `DVector`
 --> crates/zidentity/src/biometric_processors.rs:6:25
  |
6 | use nalgebra::{DMatrix, DVector};
  |                         ^^^^^^^

warning: unused import: `warn`
  --> crates/zidentity/src/biometric_processors.rs:10:28
   |
10 | use tracing::{debug, info, warn};
   |                            ^^^^

warning: unused import: `identity_service::*`
  --> crates/zidentity/src/lib.rs:46:9
   |
46 | pub use identity_service::*;
   |         ^^^^^^^^^^^^^^^^^^^

error[E0308]: mismatched types
   --> crates/zidentity/src/repository.rs:124:24
    |
124 |                 if let Ok(credential_id) = Ulid::from_bytes(bytes) {
    |                        ^^^^^^^^^^^^^^^^^   ----------------------- this expression has type `ulid::Ulid`
    |                        |
    |                        expected `Ulid`, found `Result<_, _>`
    |
    = note: expected struct `ulid::Ulid`
                 found enum `std::result::Result<_, _>`

error[E0308]: mismatched types
   --> crates/zidentity/src/repository.rs:269:39
    |
269 |         for (_, value) in table.range(range.0..range.1)? {
    |                                       ^^^^^^^ expected `&[u8]`, found `Vec<u8>`
    |
    = note: expected reference `&[u8]`
                  found struct `std::vec::Vec<u8>`
help: consider borrowing here
    |
269 |         for (_, value) in table.range(&range.0..range.1)? {
    |                                       +

error[E0308]: mismatched types
   --> crates/zidentity/src/repository.rs:269:48
    |
269 |         for (_, value) in table.range(range.0..range.1)? {
    |                                                ^^^^^^^ expected `&[u8]`, found `Vec<u8>`
    |
    = note: expected reference `&[u8]`
                  found struct `std::vec::Vec<u8>`
help: consider borrowing here
    |
269 |         for (_, value) in table.range(range.0..&range.1)? {
    |                                                +

error[E0308]: mismatched types
   --> crates/zidentity/src/repository.rs:274:67
    |
274 |             let policy: VerificationPolicy = bincode::deserialize(value)
    |                                              -------------------- ^^^^^ expected `&[u8]`, found `Vec<u8>`
    |                                              |
    |                                              arguments to this function are incorrect
    |
    = note: expected reference `&[u8]`
                  found struct `std::vec::Vec<u8>`
note: function defined here
   --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bincode-1.3.3/src/lib.rs:177:8
    |
177 | pub fn deserialize<'a, T>(bytes: &'a [u8]) -> Result<T>
    |        ^^^^^^^^^^^
help: consider borrowing here
    |
274 |             let policy: VerificationPolicy = bincode::deserialize(&value)
    |                                                                   +

error[E0308]: mismatched types
   --> crates/zidentity/src/repository.rs:470:39
    |
470 |         for (_, value) in table.range(start_key..end_key)? {
    |                                       ^^^^^^^^^ expected `&[u8]`, found `Vec<u8>`
    |
    = note: expected reference `&[u8]`
                  found struct `std::vec::Vec<u8>`
help: consider borrowing here
    |
470 |         for (_, value) in table.range(&start_key..end_key)? {
    |                                       +

error[E0308]: mismatched types
   --> crates/zidentity/src/repository.rs:470:50
    |
470 |         for (_, value) in table.range(start_key..end_key)? {
    |                                                  ^^^^^^^ expected `&[u8]`, found `Vec<u8>`
    |
    = note: expected reference `&[u8]`
                  found struct `std::vec::Vec<u8>`
help: consider borrowing here
    |
470 |         for (_, value) in table.range(start_key..&end_key)? {
    |                                                  +

error[E0308]: mismatched types
   --> crates/zidentity/src/repository.rs:475:61
    |
475 |             let entry: AuditLogEntry = bincode::deserialize(value)
    |                                        -------------------- ^^^^^ expected `&[u8]`, found `Vec<u8>`
    |                                        |
    |                                        arguments to this function are incorrect
    |
    = note: expected reference `&[u8]`
                  found struct `std::vec::Vec<u8>`
note: function defined here
   --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bincode-1.3.3/src/lib.rs:177:8
    |
177 | pub fn deserialize<'a, T>(bytes: &'a [u8]) -> Result<T>
    |        ^^^^^^^^^^^
help: consider borrowing here
    |
475 |             let entry: AuditLogEntry = bincode::deserialize(&value)
    |                                                             +

error[E0308]: mismatched types
   --> crates/zidentity/src/repository.rs:601:39
    |
601 |         for (_, value) in table.range(start_key..end_key)? {
    |                                       ^^^^^^^^^ expected `&[u8]`, found `Vec<u8>`
    |
    = note: expected reference `&[u8]`
                  found struct `std::vec::Vec<u8>`
help: consider borrowing here
    |
601 |         for (_, value) in table.range(&start_key..end_key)? {
    |                                       +

error[E0308]: mismatched types
   --> crates/zidentity/src/repository.rs:601:50
    |
601 |         for (_, value) in table.range(start_key..end_key)? {
    |                                                  ^^^^^^^ expected `&[u8]`, found `Vec<u8>`
    |
    = note: expected reference `&[u8]`
                  found struct `std::vec::Vec<u8>`
help: consider borrowing here
    |
601 |         for (_, value) in table.range(start_key..&end_key)? {
    |                                                  +

error[E0308]: mismatched types
   --> crates/zidentity/src/repository.rs:602:61
    |
602 |             let entry: AuditLogEntry = bincode::deserialize(value)
    |                                        -------------------- ^^^^^ expected `&[u8]`, found `Vec<u8>`
    |                                        |
    |                                        arguments to this function are incorrect
    |
    = note: expected reference `&[u8]`
                  found struct `std::vec::Vec<u8>`
note: function defined here
   --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/bincode-1.3.3/src/lib.rs:177:8
    |
177 | pub fn deserialize<'a, T>(bytes: &'a [u8]) -> Result<T>
    |        ^^^^^^^^^^^
help: consider borrowing here
    |
602 |             let entry: AuditLogEntry = bincode::deserialize(&value)
    |                                                             +

error[E0599]: no method named `verify_against_policy` found for struct `std::sync::Arc<repository::IdentityRepository>` in the current scope
   --> crates/zidentity/src/identity_service.rs:159:18
    |
158 |               let policy_valid = self.repository
    |  ________________________________-
159 | |                 .verify_against_policy(org_id, &credential, policy_id)
    | |                 -^^^^^^^^^^^^^^^^^^^^^ method not found in `std::sync::Arc<repository::IdentityRepository>`
    | |_________________|
    |

error[E0599]: no method named `store_verification_result` found for struct `std::sync::Arc<repository::IdentityRepository>` in the current scope
   --> crates/zidentity/src/identity_service.rs:192:14
    |
191 | /         self.repository
192 | |             .store_verification_result(org_id, verification_id, credential_id, &result, timestamp)
    | |_____________-^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `store_verification_key` with a similar name, but with different arguments
   --> crates/zidentity/src/repository.rs:372:5
    |
372 |     pub async fn store_verification_key(&self, key: &VerificationKey) -> IdentityResult<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

error[E0599]: no method named `store_proof` found for struct `std::sync::Arc<repository::IdentityRepository>` in the current scope
   --> crates/zidentity/src/identity_service.rs:241:14
    |
240 | /         self.repository
241 | |             .store_proof(org_id, proof_data.proof_id, &proof_data, proof_data.created_at, None)
    | |             -^^^^^^^^^^^ method not found in `std::sync::Arc<repository::IdentityRepository>`
    | |_____________|
    |

error[E0308]: mismatched types
   --> crates/zidentity/src/identity_service.rs:247:12
    |
247 |         Ok(proof)
    |         -- ^^^^^ expected `SelectiveDisclosureProof`, found `GenericSelectiveDisclosureProof`
    |         |
    |         arguments to this enum variant are incorrect
    |
help: the type constructed contains `models::GenericSelectiveDisclosureProof` due to the type of the argument passed
   --> crates/zidentity/src/identity_service.rs:247:9
    |
247 |         Ok(proof)
    |         ^^^-----^
    |            |
    |            this argument influences the type of `Ok`
note: tuple variant defined here
   --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/result.rs:552:5

error[E0609]: no field `disclosed_fields` on type `&bbs_plus::proof::SelectiveDisclosureProof`
   --> crates/zidentity/src/identity_service.rs:258:63
    |
258 |         let disclosed_messages: Vec<(usize, Vec<u8>)> = proof.disclosed_fields
    |                                                               ^^^^^^^^^^^^^^^^ unknown field
    |
    = note: available fields are: `a_prime`, `a_bar`, `d`, `c`, `e_response` ... and 3 others

error[E0599]: no method named `add_to_revocation_registry` found for struct `std::sync::Arc<repository::IdentityRepository>` in the current scope
   --> crates/zidentity/src/identity_service.rs:287:14
    |
286 | /         self.repository
287 | |             .add_to_revocation_registry(org_id, credential_id, revocation_timestamp, reason.clone())
    | |             -^^^^^^^^^^^^^^^^^^^^^^^^^^ method not found in `std::sync::Arc<repository::IdentityRepository>`
    | |_____________|
    |

error[E0308]: mismatched types
   --> crates/zidentity/src/identity_service.rs:385:90
    |
385 | ...ial_type.as_deref(), Some(&status.unwrap_or(CredentialStatus::Active)), limit, offset)
    |                         ---- ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `Ulid`, found `&CredentialStatus`
    |                         |
    |                         arguments to this enum variant are incorrect
    |
help: the type constructed contains `&models::CredentialStatus` due to the type of the argument passed
   --> crates/zidentity/src/identity_service.rs:385:85
    |
385 | ...ial_type.as_deref(), Some(&status.unwrap_or(CredentialStatus::Active)), limit, offset)
    |                         ^^^^^-------------------------------------------^
    |                              |
    |                              this argument influences the type of `Some`
note: tuple variant defined here
   --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/option.rs:601:5

error[E0061]: this method takes 5 arguments but 6 arguments were supplied
   --> crates/zidentity/src/identity_service.rs:385:14
    |
385 | ...  .list_credentials_for_user(org_id, user_id, credential_type.as_deref(), Some(&status.unwrap_or(CredentialStatus::Active)), limit, offset)
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^                                                                                                        ------ unexpected argument #6 of type `usize`
    |
note: expected `Option<String>`, found `Option<&str>`
   --> crates/zidentity/src/identity_service.rs:385:57
    |
385 | ...   .list_credentials_for_user(org_id, user_id, credential_type.as_deref(), Some(&status.unwrap_or(CredentialStatus::Active)), limit, o...
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = note: expected enum `std::option::Option<std::string::String>`
               found enum `std::option::Option<&str>`
note: method defined here
   --> crates/zidentity/src/repository.rs:94:18
    |
 94 |     pub async fn list_credentials_for_user(
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^
...
 98 |         credential_type: Option<String>,
    |         -------------------------------
help: try removing the method call
    |
385 -             .list_credentials_for_user(org_id, user_id, credential_type.as_deref(), Some(&status.unwrap_or(CredentialStatus::Active)), limit, offset)
385 +             .list_credentials_for_user(org_id, user_id, credential_type, Some(&status.unwrap_or(CredentialStatus::Active)), limit, offset)
    |
help: remove the extra argument
    |
385 -             .list_credentials_for_user(org_id, user_id, credential_type.as_deref(), Some(&status.unwrap_or(CredentialStatus::Active)), limit, offset)
385 +             .list_credentials_for_user(org_id, user_id, /* std::option::Option<std::string::String> */, Some(&status.unwrap_or(CredentialStatus::Active)), limit)
    |

error[E0599]: no method named `count_credentials_for_user` found for struct `std::sync::Arc<repository::IdentityRepository>` in the current scope
   --> crates/zidentity/src/identity_service.rs:401:18
    |
400 |               let total = self.repository
    |  _________________________-
401 | |                 .count_credentials_for_user(org_id, user_id, None, None)
    | |_________________-^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `list_credentials_for_user` with a similar name, but with different arguments
   --> crates/zidentity/src/repository.rs:94:5
    |
 94 | /     pub async fn list_credentials_for_user(
 95 | |         &self,
 96 | |         org_id: Uuid,
 97 | |         user_id: Uuid,
...   |
100 | |         limit: usize,
101 | |     ) -> IdentityResult<Vec<CredentialMetadata>> {
    | |________________________________________________^

error[E0599]: no method named `count_credentials_for_user` found for struct `std::sync::Arc<repository::IdentityRepository>` in the current scope
   --> crates/zidentity/src/identity_service.rs:406:18
    |
405 |               let active = self.repository
    |  __________________________-
406 | |                 .count_credentials_for_user(org_id, user_id, None, Some(&CredentialStatus::Active))
    | |_________________-^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `list_credentials_for_user` with a similar name, but with different arguments
   --> crates/zidentity/src/repository.rs:94:5
    |
 94 | /     pub async fn list_credentials_for_user(
 95 | |         &self,
 96 | |         org_id: Uuid,
 97 | |         user_id: Uuid,
...   |
100 | |         limit: usize,
101 | |     ) -> IdentityResult<Vec<CredentialMetadata>> {
    | |________________________________________________^

error[E0599]: no method named `count_credentials_for_user` found for struct `std::sync::Arc<repository::IdentityRepository>` in the current scope
   --> crates/zidentity/src/identity_service.rs:411:18
    |
410 |               let revoked = self.repository
    |  ___________________________-
411 | |                 .count_credentials_for_user(org_id, user_id, None, Some(&CredentialStatus::Revoked))
    | |_________________-^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: there is a method `list_credentials_for_user` with a similar name, but with different arguments
   --> crates/zidentity/src/repository.rs:94:5
    |
 94 | /     pub async fn list_credentials_for_user(
 95 | |         &self,
 96 | |         org_id: Uuid,
 97 | |         user_id: Uuid,
...   |
100 | |         limit: usize,
101 | |     ) -> IdentityResult<Vec<CredentialMetadata>> {
    | |________________________________________________^

error[E0615]: attempted to take value of method `public` on type `crypto::ed25519_dalek::Keypair`
   --> crates/zidentity/src/crypto.rs:162:52
    |
162 |         Ok((signature.to_bytes().to_vec(), keypair.public.to_bytes().to_vec()))
    |                                                    ^^^^^^ method, not a field
    |
help: use parentheses to call the method
    |
162 |         Ok((signature.to_bytes().to_vec(), keypair.public().to_bytes().to_vec()))
    |                                                          ++

error[E0382]: use of moved value: `field_hashes`
   --> crates/zidentity/src/crypto.rs:212:25
    |
174 |         let mut field_hashes = Vec::new();
    |             ---------------- move occurs because `field_hashes` has type `std::vec::Vec<std::vec::Vec<u8>>`, which does not implement the `Copy` trait
...
193 |         let mut current_level = field_hashes;
    |                                 ------------ value moved here
...
212 |         let leaf_hash = field_hashes.into_iter().next().unwrap_or_else(|| vec![0u8; 32]);
    |                         ^^^^^^^^^^^^ value used here after move
    |
help: consider cloning the value if the performance cost is acceptable
    |
193 |         let mut current_level = field_hashes.clone();
    |                                             ++++++++

error[E0277]: `?` couldn't convert the error to `error::IdentityError`
   --> crates/zidentity/src/proofs.rs:589:98
    |
589 |         let witness = self.generate_groth16_witness(credential, disclosed_fields, private_fields)?;
    |                            ----------------------------------------------------------------------^ the trait `std::convert::From<proofs::ProofError>` is not implemented for `error::IdentityError`
    |                            |
    |                            this can't be annotated with `?` because it has type `Result<_, proofs::ProofError>`
    |
note: `error::IdentityError` needs to implement `From<proofs::ProofError>`
   --> crates/zidentity/src/error.rs:11:1
    |
 11 | pub enum IdentityError {
    | ^^^^^^^^^^^^^^^^^^^^^^
note: alternatively, `proofs::ProofError` needs to implement `Into<error::IdentityError>`
   --> crates/zidentity/src/proofs.rs:135:1
    |
135 | pub enum ProofError {
    | ^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `error::IdentityError` implements `std::convert::From<anyhow::Error>`
              `error::IdentityError` implements `std::convert::From<serde_json::Error>`
              `error::IdentityError` implements `std::convert::From<validator::ValidationErrors>`

error[E0277]: `?` couldn't convert the error to `error::IdentityError`
   --> crates/zidentity/src/proofs.rs:616:96
    |
616 |         let witness = self.generate_plonk_witness(credential, disclosed_fields, private_fields)?;
    |                            --------------------------------------------------------------------^ the trait `std::convert::From<proofs::ProofError>` is not implemented for `error::IdentityError`
    |                            |
    |                            this can't be annotated with `?` because it has type `Result<_, proofs::ProofError>`
    |
note: `error::IdentityError` needs to implement `From<proofs::ProofError>`
   --> crates/zidentity/src/error.rs:11:1
    |
 11 | pub enum IdentityError {
    | ^^^^^^^^^^^^^^^^^^^^^^
note: alternatively, `proofs::ProofError` needs to implement `Into<error::IdentityError>`
   --> crates/zidentity/src/proofs.rs:135:1
    |
135 | pub enum ProofError {
    | ^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `error::IdentityError` implements `std::convert::From<anyhow::Error>`
              `error::IdentityError` implements `std::convert::From<serde_json::Error>`
              `error::IdentityError` implements `std::convert::From<validator::ValidationErrors>`

error[E0277]: `?` couldn't convert the error to `error::IdentityError`
   --> crates/zidentity/src/proofs.rs:763:95
    |
763 |         let witness = self.generate_selective_disclosure_witness(credential, disclosed_fields)?;
    |                            -------------------------------------------------------------------^ the trait `std::convert::From<proofs::ProofError>` is not implemented for `error::IdentityError`
    |                            |
    |                            this can't be annotated with `?` because it has type `Result<_, proofs::ProofError>`
    |
note: `error::IdentityError` needs to implement `From<proofs::ProofError>`
   --> crates/zidentity/src/error.rs:11:1
    |
 11 | pub enum IdentityError {
    | ^^^^^^^^^^^^^^^^^^^^^^
note: alternatively, `proofs::ProofError` needs to implement `Into<error::IdentityError>`
   --> crates/zidentity/src/proofs.rs:135:1
    |
135 | pub enum ProofError {
    | ^^^^^^^^^^^^^^^^^^^
    = note: the question mark operation (`?`) implicitly performs a conversion on the error value using the `From` trait
    = help: the following other types implement trait `std::convert::From<T>`:
              `error::IdentityError` implements `std::convert::From<anyhow::Error>`
              `error::IdentityError` implements `std::convert::From<serde_json::Error>`
              `error::IdentityError` implements `std::convert::From<validator::ValidationErrors>`

warning: unused variable: `start_time`
   --> crates/zidentity/src/proofs.rs:793:13
    |
793 |         let start_time = Instant::now();
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_start_time`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `public_inputs`
    --> crates/zidentity/src/proofs.rs:1527:9
     |
1527 |         public_inputs: &[MobileField],
     |         ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_public_inputs`

warning: unused variable: `initial_memory`
    --> crates/zidentity/src/proofs.rs:1644:13
     |
1644 |         let initial_memory = self.estimate_memory_usage(&CircuitParameters::default());
     |             ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_initial_memory`

warning: unused variable: `weak_algorithms`
   --> crates/zidentity/src/security_audit.rs:274:13
    |
274 |         let weak_algorithms = vec![
    |             ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_weak_algorithms`

error[E0599]: no variant or associated item named `DataProtection` found for enum `security_audit::SecurityCategory` in the current scope
   --> crates/zidentity/src/security_audit.rs:557:41
    |
 55 | pub enum SecurityCategory {
    | ------------------------- variant or associated item `DataProtection` not found for this enum
...
557 |             category: SecurityCategory::DataProtection,
    |                                         ^^^^^^^^^^^^^^ variant or associated item not found in `security_audit::SecurityCategory`

error[E0599]: no variant or associated item named `DataProtection` found for enum `security_audit::SecurityCategory` in the current scope
   --> crates/zidentity/src/security_audit.rs:885:72
    |
 55 | pub enum SecurityCategory {
    | ------------------------- variant or associated item `DataProtection` not found for this enum
...
885 |                     SecurityCategory::DataExposure | SecurityCategory::DataProtection => {
    |                                                                        ^^^^^^^^^^^^^^ variant or associated item not found in `security_audit::SecurityCategory`

warning: unused variable: `endpoints`
    --> crates/zidentity/src/monitoring.rs:1228:60
     |
1228 |     pub async fn send_alert_resolved(&self, alert: &Alert, endpoints: &[NotificationEndpoint]) -> IdentityResult<()> {
     |                                                            ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_endpoints`

error[E0277]: can't compare `monitoring::AlertSeverity` with `monitoring::AlertSeverity`
    --> crates/zidentity/src/monitoring.rs:1204:48
     |
1204 |             if endpoint.config.severity_filter.contains(&alert.severity) {
     |                                                ^^^^^^^^ no implementation for `monitoring::AlertSeverity == monitoring::AlertSeverity`
     |
     = help: the trait `std::cmp::PartialEq` is not implemented for `monitoring::AlertSeverity`
note: required by a bound in `core::slice::<impl [T]>::contains`
    --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/slice/mod.rs:2583:5
help: consider annotating `monitoring::AlertSeverity` with `#[derive(PartialEq)]`
     |
 795 + #[derive(PartialEq)]
 796 | pub enum AlertSeverity {
     |

error[E0308]: `match` arms have incompatible types
   --> crates/zidentity/src/monitoring.rs:916:41
    |
914 |           let check_future = match check.check_type {
    |  ____________________________-
915 | |             HealthCheckType::Database => self.check_database_health(),
    | |                                          ---------------------------- this is found to be of type `impl futures_util::Future<Output = std::result::Result<bool, error::IdentityError>>`
916 | |             HealthCheckType::Service => self.check_service_health(&check.component),
    | |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected future, found a different future
917 | |             HealthCheckType::External => self.check_external_health(&check.name),
918 | |         };
    | |_________- `match` arms have incompatible types
    |
    = note: distinct uses of `impl Trait` result in different opaque types
help: consider `await`ing on both `Future`s
    |
915 ~             HealthCheckType::Database => self.check_database_health().await,
916 ~             HealthCheckType::Service => self.check_service_health(&check.component).await,
    |

warning: unused variable: `assessment`
   --> crates/zidentity/src/compliance.rs:199:13
    |
199 |         let assessment = self.assess_compliance().await?;
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_assessment`

warning: unused variable: `assessment`
   --> crates/zidentity/src/compliance.rs:522:13
    |
522 |         let assessment = self.assess_compliance().await?;
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_assessment`

warning: variable does not need to be mutable
   --> crates/zidentity/src/compliance.rs:525:13
    |
525 |         let mut recommendations = Vec::new();
    |             ----^^^^^^^^^^^^^^^
    |             |
    |             help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

error[E0382]: borrow of moved value: `checks`
    --> crates/zidentity/src/deployment.rs:1505:60
     |
1427 |         let mut checks = Vec::new();
     |             ---------- move occurs because `checks` has type `std::vec::Vec<deployment::ProductionReadinessCheck>`, which does not implement the `Copy` trait
...
1504 |             checks,
     |             ------ value moved here
1505 |             recommendations: self.generate_recommendations(&checks).await?,
     |                                                            ^^^^^^^ value borrowed here after move
     |
     = note: borrow occurs due to deref coercion to `[deployment::ProductionReadinessCheck]`
help: consider cloning the value if the performance cost is acceptable
     |
1504 |             checks: checks.clone(),
     |                   ++++++++++++++++

warning: unused variable: `params`
   --> crates/zidentity/src/secure_enclave.rs:379:38
    |
379 |     pub async fn generate_key(&self, params: SecureEnclaveKeyParams) -> Result<Vec<u8>> {
    |                                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_params`

warning: unused variable: `key_id`
   --> crates/zidentity/src/secure_enclave.rs:519:30
    |
519 |     pub async fn sign(&self, key_id: &str, data: &[u8]) -> Result<Vec<u8>> {
    |                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_key_id`

warning: unused variable: `data`
   --> crates/zidentity/src/secure_enclave.rs:519:44
    |
519 |     pub async fn sign(&self, key_id: &str, data: &[u8]) -> Result<Vec<u8>> {
    |                                            ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `key_id`
   --> crates/zidentity/src/secure_enclave.rs:585:32
    |
585 |     pub async fn verify(&self, key_id: &str, data: &[u8], signature: &[u8]) -> Result<bool> {
    |                                ^^^^^^ help: if this is intentional, prefix it with an underscore: `_key_id`

warning: unused variable: `data`
   --> crates/zidentity/src/secure_enclave.rs:585:46
    |
585 |     pub async fn verify(&self, key_id: &str, data: &[u8], signature: &[u8]) -> Result<bool> {
    |                                              ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `signature`
   --> crates/zidentity/src/secure_enclave.rs:585:59
    |
585 |     pub async fn verify(&self, key_id: &str, data: &[u8], signature: &[u8]) -> Result<bool> {
    |                                                           ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_signature`

warning: unused variable: `key_id`
   --> crates/zidentity/src/secure_enclave.rs:653:36
    |
653 |     pub async fn delete_key(&self, key_id: &str) -> Result<()> {
    |                                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_key_id`

warning: unused variable: `key_id`
   --> crates/zidentity/src/secure_enclave.rs:690:36
    |
690 |     pub async fn attest_key(&self, key_id: &str) -> Result<SecureEnclaveAttestation> {
    |                                    ^^^^^^ help: if this is intentional, prefix it with an underscore: `_key_id`

warning: unused variable: `key_id`
  --> crates/zidentity/src/android_keystore.rs:73:38
   |
73 |     pub async fn generate_key(&self, key_id: &str) -> Result<()> {
   |                                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_key_id`

warning: unused variable: `key_id`
  --> crates/zidentity/src/android_keystore.rs:98:30
   |
98 |     pub async fn sign(&self, key_id: &str, data: &[u8]) -> Result<Vec<u8>> {
   |                              ^^^^^^ help: if this is intentional, prefix it with an underscore: `_key_id`

warning: unused variable: `data`
  --> crates/zidentity/src/android_keystore.rs:98:44
   |
98 |     pub async fn sign(&self, key_id: &str, data: &[u8]) -> Result<Vec<u8>> {
   |                                            ^^^^ help: if this is intentional, prefix it with an underscore: `_data`

warning: unused variable: `request`
   --> crates/zidentity/src/biometric.rs:180:38
    |
180 |     pub async fn authenticate(&self, request: BiometricAuthRequest) -> BiometricResult<BiometricAuthResult> {
    |                                      ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_request`

error[E0592]: duplicate definitions with name `get_mobile_config`
    --> crates/zidentity/src/proofs.rs:1701:5
     |
1497 |     pub fn get_mobile_config(&self) -> &MobileOptimizationConfig {
     |     ------------------------------------------------------------ other definition for `get_mobile_config`
...
1701 |     pub fn get_mobile_config(&self) -> &MobileOptimizationConfig {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ duplicate definitions for `get_mobile_config`

error[E0277]: `Rc<UnsafeCell<ReseedingRng<ChaCha12Core, OsRng>>>` cannot be shared between threads safely
  --> crates/zidentity/src/crypto.rs:91:60
   |
91 |             rng: std::sync::Arc::new(std::sync::Mutex::new(Box::new(thread_rng()))),
   |                                                            ^^^^^^^^^^^^^^^^^^^^^^ `Rc<UnsafeCell<ReseedingRng<ChaCha12Core, OsRng>>>` cannot be shared between threads safely
   |
   = help: within `rand::prelude::ThreadRng`, the trait `std::marker::Sync` is not implemented for `Rc<UnsafeCell<ReseedingRng<ChaCha12Core, OsRng>>>`
note: required because it appears within the type `rand::prelude::ThreadRng`
  --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/rngs/thread.rs:62:12
   |
62 | pub struct ThreadRng {
   |            ^^^^^^^^^
   = note: required for the cast from `std::boxed::Box<rand::prelude::ThreadRng>` to `std::boxed::Box<(dyn rand_core::RngCore + std::marker::Send + std::marker::Sync + 'static)>`
   = note: the full name for the type has been written to '/home/zach/github/ZDB/target/debug/deps/zidentity-b218eff6616aac8a.long-type-1381629097949831068.txt'
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: `Rc<UnsafeCell<ReseedingRng<ChaCha12Core, OsRng>>>` cannot be sent between threads safely
  --> crates/zidentity/src/crypto.rs:91:60
   |
91 |             rng: std::sync::Arc::new(std::sync::Mutex::new(Box::new(thread_rng()))),
   |                                                            ^^^^^^^^^^^^^^^^^^^^^^ `Rc<UnsafeCell<ReseedingRng<ChaCha12Core, OsRng>>>` cannot be sent between threads safely
   |
   = help: within `rand::prelude::ThreadRng`, the trait `std::marker::Send` is not implemented for `Rc<UnsafeCell<ReseedingRng<ChaCha12Core, OsRng>>>`
note: required because it appears within the type `rand::prelude::ThreadRng`
  --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/rngs/thread.rs:62:12
   |
62 | pub struct ThreadRng {
   |            ^^^^^^^^^
   = note: required for the cast from `std::boxed::Box<rand::prelude::ThreadRng>` to `std::boxed::Box<(dyn rand_core::RngCore + std::marker::Send + std::marker::Sync + 'static)>`
   = note: the full name for the type has been written to '/home/zach/github/ZDB/target/debug/deps/zidentity-b218eff6616aac8a.long-type-1381629097949831068.txt'
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: `Rc<UnsafeCell<ReseedingRng<ChaCha12Core, OsRng>>>` cannot be shared between threads safely
   --> crates/zidentity/src/crypto.rs:104:60
    |
104 |             rng: std::sync::Arc::new(std::sync::Mutex::new(Box::new(thread_rng()))),
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^ `Rc<UnsafeCell<ReseedingRng<ChaCha12Core, OsRng>>>` cannot be shared between threads safely
    |
    = help: within `rand::prelude::ThreadRng`, the trait `std::marker::Sync` is not implemented for `Rc<UnsafeCell<ReseedingRng<ChaCha12Core, OsRng>>>`
note: required because it appears within the type `rand::prelude::ThreadRng`
   --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/rngs/thread.rs:62:12
    |
 62 | pub struct ThreadRng {
    |            ^^^^^^^^^
    = note: required for the cast from `std::boxed::Box<rand::prelude::ThreadRng>` to `std::boxed::Box<(dyn rand_core::RngCore + std::marker::Send + std::marker::Sync + 'static)>`
    = note: the full name for the type has been written to '/home/zach/github/ZDB/target/debug/deps/zidentity-b218eff6616aac8a.long-type-1381629097949831068.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0277]: `Rc<UnsafeCell<ReseedingRng<ChaCha12Core, OsRng>>>` cannot be sent between threads safely
   --> crates/zidentity/src/crypto.rs:104:60
    |
104 |             rng: std::sync::Arc::new(std::sync::Mutex::new(Box::new(thread_rng()))),
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^ `Rc<UnsafeCell<ReseedingRng<ChaCha12Core, OsRng>>>` cannot be sent between threads safely
    |
    = help: within `rand::prelude::ThreadRng`, the trait `std::marker::Send` is not implemented for `Rc<UnsafeCell<ReseedingRng<ChaCha12Core, OsRng>>>`
note: required because it appears within the type `rand::prelude::ThreadRng`
   --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/rand-0.8.5/src/rngs/thread.rs:62:12
    |
 62 | pub struct ThreadRng {
    |            ^^^^^^^^^
    = note: required for the cast from `std::boxed::Box<rand::prelude::ThreadRng>` to `std::boxed::Box<(dyn rand_core::RngCore + std::marker::Send + std::marker::Sync + 'static)>`
    = note: the full name for the type has been written to '/home/zach/github/ZDB/target/debug/deps/zidentity-b218eff6616aac8a.long-type-1381629097949831068.txt'
    = note: consider using `--verbose` to print the full type name to the console

error[E0599]: `()` doesn't implement `std::fmt::Display`
   --> crates/zidentity/src/crypto.rs:363:62
    |
363 |             .map_err(|e| IdentityError::CryptographicError(e.to_string()))?;
    |                                                              ^^^^^^^^^ method cannot be called on `()` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `(): std::fmt::Display`
            which is required by `(): std::string::ToString`

error[E0599]: `()` doesn't implement `std::fmt::Display`
   --> crates/zidentity/src/crypto.rs:366:62
    |
366 |             .map_err(|e| IdentityError::CryptographicError(e.to_string()))?;
    |                                                              ^^^^^^^^^ method cannot be called on `()` due to unsatisfied trait bounds
    |
    = note: the following trait bounds were not satisfied:
            `(): std::fmt::Display`
            which is required by `(): std::string::ToString`

error[E0599]: no function or associated item named `from_le_bytes_mod_order` found for struct `ark_ff::Fp` in the current scope
   --> crates/zidentity/src/crypto.rs:463:47
    |
463 |         let scalar = crate::bbs_plus::Scalar::from_le_bytes_mod_order(&derived);
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^ function or associated item not found in `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>`
    |
note: if you're trying to build a new `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>` consider using one of the following associated functions:
      ark_ff::fp::montgomery_backend::<impl ark_ff::Fp<ark_ff::MontBackend<T, N>, N>>::new
      ark_ff::fp::montgomery_backend::<impl ark_ff::Fp<ark_ff::MontBackend<T, N>, N>>::new_unchecked
      ark_ff::fp::montgomery_backend::<impl ark_ff::Fp<ark_ff::MontBackend<T, N>, N>>::from_sign_and_limbs
   --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/montgomery_backend.rs:691:5
    |
691 |     pub const fn new(element: BigInt<N>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
709 |     pub const fn new_unchecked(element: BigInt<N>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
730 |     pub const fn from_sign_and_limbs(is_positive: bool, limbs: &[u64]) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is in scope
help: trait `PrimeField` which provides `from_le_bytes_mod_order` is implemented but not in scope; perhaps you want to import it
    |
  1 + use ark_ff::PrimeField;
    |
help: there is an associated function `from_be_bytes_mod_order` with a similar name
    |
463 -         let scalar = crate::bbs_plus::Scalar::from_le_bytes_mod_order(&derived);
463 +         let scalar = crate::bbs_plus::Scalar::from_be_bytes_mod_order(&derived);
    |

error[E0277]: the trait bound `bbs_plus::proof::SelectiveDisclosureProof: serde::Serialize` is not satisfied
    --> crates/zidentity/src/proofs.rs:25:24
     |
  25 | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `models::_::_serde::Serialize` is not implemented for `bbs_plus::proof::SelectiveDisclosureProof`
  26 | pub struct EnhancedSelectiveDisclosureProof {
  27 |     /// BBS+ selective disclosure proof
     |     ----------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `bbs_plus::proof::SelectiveDisclosureProof` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1169 others
note: required by a bound in `models::_::_serde::ser::SerializeStruct::serialize_field`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/ser/mod.rs:1917:21
     |
1915 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1916 |     where
1917 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `bbs_plus::EncodedMessage: serde::Serialize` is not satisfied
    --> crates/zidentity/src/proofs.rs:25:24
     |
  25 | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `models::_::_serde::Serialize` is not implemented for `bbs_plus::EncodedMessage`
...
  29 |     /// Disclosed messages with their indices
     |     ----------------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `bbs_plus::EncodedMessage` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1169 others
     = note: required for `(usize, bbs_plus::EncodedMessage)` to implement `models::_::_serde::Serialize`
     = note: 1 redundant requirement hidden
     = note: required for `std::vec::Vec<(usize, bbs_plus::EncodedMessage)>` to implement `models::_::_serde::Serialize`
note: required by a bound in `models::_::_serde::ser::SerializeStruct::serialize_field`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/ser/mod.rs:1917:21
     |
1915 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1916 |     where
1917 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `bbs_plus::proof::SelectiveDisclosureProof: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/proofs.rs:28:20
     |
  28 |     pub bbs_proof: crate::bbs_plus::proof::SelectiveDisclosureProof,
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `bbs_plus::proof::SelectiveDisclosureProof`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `bbs_plus::proof::SelectiveDisclosureProof` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1161 others
note: required by a bound in `models::_::_serde::de::SeqAccess::next_element`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1771:12
     |
1769 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1770 |     where
1771 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `bbs_plus::EncodedMessage: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/proofs.rs:30:29
     |
  30 |     pub disclosed_messages: Vec<(usize, crate::bbs_plus::EncodedMessage)>,
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `bbs_plus::EncodedMessage`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `bbs_plus::EncodedMessage` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1161 others
     = note: required for `(usize, bbs_plus::EncodedMessage)` to implement `models::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `std::vec::Vec<(usize, bbs_plus::EncodedMessage)>` to implement `models::_::_serde::Deserialize<'_>`
note: required by a bound in `models::_::_serde::de::SeqAccess::next_element`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1771:12
     |
1769 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1770 |     where
1771 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `bbs_plus::proof::SelectiveDisclosureProof: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/proofs.rs:28:20
     |
  28 |     pub bbs_proof: crate::bbs_plus::proof::SelectiveDisclosureProof,
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `bbs_plus::proof::SelectiveDisclosureProof`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `bbs_plus::proof::SelectiveDisclosureProof` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1161 others
note: required by a bound in `models::_::_serde::de::MapAccess::next_value`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1916:12
     |
1914 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1915 |     where
1916 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `bbs_plus::EncodedMessage: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/proofs.rs:30:29
     |
  30 |     pub disclosed_messages: Vec<(usize, crate::bbs_plus::EncodedMessage)>,
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `bbs_plus::EncodedMessage`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `bbs_plus::EncodedMessage` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1161 others
     = note: required for `(usize, bbs_plus::EncodedMessage)` to implement `models::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `std::vec::Vec<(usize, bbs_plus::EncodedMessage)>` to implement `models::_::_serde::Deserialize<'_>`
note: required by a bound in `models::_::_serde::de::MapAccess::next_value`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1916:12
     |
1914 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1915 |     where
1916 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `bbs_plus::proof::SelectiveDisclosureProof: serde::Deserialize<'de>` is not satisfied
  --> crates/zidentity/src/proofs.rs:25:35
   |
25 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `bbs_plus::proof::SelectiveDisclosureProof`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `bbs_plus::proof::SelectiveDisclosureProof` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
             &'a [u8]
             &'a serde_json::value::RawValue
             &'a std::path::Path
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
           and 1161 others
note: required by a bound in `models::_::_serde::__private227::de::missing_field`
  --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.227/src/private/de.rs:26:8
   |
24 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
25 | where
26 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `bbs_plus::EncodedMessage: serde::Deserialize<'de>` is not satisfied
  --> crates/zidentity/src/proofs.rs:25:35
   |
25 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `bbs_plus::EncodedMessage`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `bbs_plus::EncodedMessage` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
             &'a [u8]
             &'a serde_json::value::RawValue
             &'a std::path::Path
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
           and 1161 others
   = note: required for `(usize, bbs_plus::EncodedMessage)` to implement `models::_::_serde::Deserialize<'_>`
   = note: 1 redundant requirement hidden
   = note: required for `std::vec::Vec<(usize, bbs_plus::EncodedMessage)>` to implement `models::_::_serde::Deserialize<'_>`
note: required by a bound in `models::_::_serde::__private227::de::missing_field`
  --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.227/src/private/de.rs:26:8
   |
24 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
25 | where
26 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>: serde::Serialize` is not satisfied
    --> crates/zidentity/src/proofs.rs:212:24
     |
 212 | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `models::_::_serde::Serialize` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>`
 213 | pub struct ArithmeticConstraint {
 214 |     /// Linear combination for left input
     |     ------------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1169 others
     = note: required for `(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)` to implement `models::_::_serde::Serialize`
     = note: 1 redundant requirement hidden
     = note: required for `std::vec::Vec<(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)>` to implement `models::_::_serde::Serialize`
note: required by a bound in `models::_::_serde::ser::SerializeStruct::serialize_field`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/ser/mod.rs:1917:21
     |
1915 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1916 |     where
1917 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/proofs.rs:215:15
     |
 215 |     pub left: Vec<(usize, MobileField)>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1161 others
     = note: required for `(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)` to implement `models::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `std::vec::Vec<(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)>` to implement `models::_::_serde::Deserialize<'_>`
note: required by a bound in `models::_::_serde::de::SeqAccess::next_element`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1771:12
     |
1769 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1770 |     where
1771 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/proofs.rs:217:16
     |
 217 |     pub right: Vec<(usize, MobileField)>,
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1161 others
     = note: required for `(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)` to implement `models::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `std::vec::Vec<(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)>` to implement `models::_::_serde::Deserialize<'_>`
note: required by a bound in `models::_::_serde::de::SeqAccess::next_element`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1771:12
     |
1769 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1770 |     where
1771 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/proofs.rs:219:17
     |
 219 |     pub output: Vec<(usize, MobileField)>,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1161 others
     = note: required for `(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)` to implement `models::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `std::vec::Vec<(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)>` to implement `models::_::_serde::Deserialize<'_>`
note: required by a bound in `models::_::_serde::de::SeqAccess::next_element`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1771:12
     |
1769 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1770 |     where
1771 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/proofs.rs:215:15
     |
 215 |     pub left: Vec<(usize, MobileField)>,
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1161 others
     = note: required for `(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)` to implement `models::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `std::vec::Vec<(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)>` to implement `models::_::_serde::Deserialize<'_>`
note: required by a bound in `models::_::_serde::de::MapAccess::next_value`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1916:12
     |
1914 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1915 |     where
1916 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/proofs.rs:217:16
     |
 217 |     pub right: Vec<(usize, MobileField)>,
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1161 others
     = note: required for `(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)` to implement `models::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `std::vec::Vec<(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)>` to implement `models::_::_serde::Deserialize<'_>`
note: required by a bound in `models::_::_serde::de::MapAccess::next_value`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1916:12
     |
1914 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1915 |     where
1916 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/proofs.rs:219:17
     |
 219 |     pub output: Vec<(usize, MobileField)>,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1161 others
     = note: required for `(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)` to implement `models::_::_serde::Deserialize<'_>`
     = note: 1 redundant requirement hidden
     = note: required for `std::vec::Vec<(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)>` to implement `models::_::_serde::Deserialize<'_>`
note: required by a bound in `models::_::_serde::de::MapAccess::next_value`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1916:12
     |
1914 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1915 |     where
1916 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>: serde::Deserialize<'de>` is not satisfied
   --> crates/zidentity/src/proofs.rs:212:35
    |
212 | #[derive(Debug, Clone, Serialize, Deserialize)]
    |                                   ^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>`
    |
    = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>` type
    = note: for types from other crates check whether the crate offers a `serde` feature flag
    = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
              &'a [u8]
              &'a serde_json::value::RawValue
              &'a std::path::Path
              &'a str
              ()
              (T,)
              (T0, T1)
              (T0, T1, T2)
            and 1161 others
    = note: required for `(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)` to implement `models::_::_serde::Deserialize<'_>`
    = note: 1 redundant requirement hidden
    = note: required for `std::vec::Vec<(usize, ark_ff::Fp<ark_ff::MontBackend<ark_bn254::FrConfig, 4>, 4>)>` to implement `models::_::_serde::Deserialize<'_>`
note: required by a bound in `models::_::_serde::__private227::de::missing_field`
   --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.227/src/private/de.rs:26:8
    |
 24 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
    |        ------------- required by a bound in this function
 25 | where
 26 |     V: Deserialize<'de>,
    |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
    = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no variant or associated item named `DataProtection` found for enum `security_audit::SecurityCategory` in the current scope
   --> crates/zidentity/src/security_audit.rs:703:68
    |
 55 | pub enum SecurityCategory {
    | ------------------------- variant or associated item `DataProtection` not found for this enum
...
703 |                 SecurityCategory::DataExposure | SecurityCategory::DataProtection => data_score -= deduction,
    |                                                                    ^^^^^^^^^^^^^^ variant or associated item not found in `security_audit::SecurityCategory`

error[E0277]: the trait bound `ark_ec::short_weierstrass::Projective<ark_bls12_381::g2::Config>: serde::Serialize` is not satisfied
    --> crates/zidentity/src/bbs_plus/keys.rs:63:24
     |
  63 | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `models::_::_serde::Serialize` is not implemented for `ark_ec::short_weierstrass::Projective<ark_bls12_381::g2::Config>`
  64 | pub struct BBSPlusPublicKey {
  65 |     /// Public key in G2
     |     -------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ark_ec::short_weierstrass::Projective<ark_bls12_381::g2::Config>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1169 others
note: required by a bound in `models::_::_serde::ser::SerializeStruct::serialize_field`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/ser/mod.rs:1917:21
     |
1915 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1916 |     where
1917 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ark_ec::short_weierstrass::Projective<ark_bls12_381::g2::Config>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/bbs_plus/keys.rs:66:28
     |
  66 |     pub(crate) public_key: G2Point,
     |                            ^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ec::short_weierstrass::Projective<ark_bls12_381::g2::Config>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ec::short_weierstrass::Projective<ark_bls12_381::g2::Config>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1153 others
note: required by a bound in `models::_::_serde::de::SeqAccess::next_element`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1771:12
     |
1769 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1770 |     where
1771 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ark_ec::short_weierstrass::Projective<ark_bls12_381::g2::Config>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/bbs_plus/keys.rs:66:28
     |
  66 |     pub(crate) public_key: G2Point,
     |                            ^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ec::short_weierstrass::Projective<ark_bls12_381::g2::Config>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ec::short_weierstrass::Projective<ark_bls12_381::g2::Config>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1153 others
note: required by a bound in `models::_::_serde::de::MapAccess::next_value`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1916:12
     |
1914 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1915 |     where
1916 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ark_ec::short_weierstrass::Projective<ark_bls12_381::g2::Config>: serde::Deserialize<'de>` is not satisfied
  --> crates/zidentity/src/bbs_plus/keys.rs:63:35
   |
63 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ec::short_weierstrass::Projective<ark_bls12_381::g2::Config>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ec::short_weierstrass::Projective<ark_bls12_381::g2::Config>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
             &'a [u8]
             &'a serde_json::value::RawValue
             &'a std::path::Path
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
           and 1153 others
note: required by a bound in `models::_::_serde::__private227::de::missing_field`
  --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.227/src/private/de.rs:26:8
   |
24 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
25 | where
26 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>: serde::Serialize` is not satisfied
    --> crates/zidentity/src/bbs_plus/signature.rs:17:24
     |
  17 | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `models::_::_serde::Serialize` is not implemented for `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>`
  18 | pub struct BBSPlusSignature {
  19 |     /// Signature component A (in G1)
     |     --------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1169 others
note: required by a bound in `models::_::_serde::ser::SerializeStruct::serialize_field`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/ser/mod.rs:1917:21
     |
1915 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1916 |     where
1917 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>: serde::Serialize` is not satisfied
    --> crates/zidentity/src/bbs_plus/signature.rs:17:24
     |
  17 | #[derive(Debug, Clone, Serialize, Deserialize)]
     |                        ^^^^^^^^^ the trait `models::_::_serde::Serialize` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>`
...
  21 |     /// Signature component e (scalar)
     |     ---------------------------------- required by a bound introduced by this call
     |
     = note: for local types consider adding `#[derive(serde::Serialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Serialize`:
               &'a T
               &'a mut T
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
               (T0, T1, T2, T3)
               (T0, T1, T2, T3, T4)
             and 1169 others
note: required by a bound in `models::_::_serde::ser::SerializeStruct::serialize_field`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/ser/mod.rs:1917:21
     |
1915 |     fn serialize_field<T>(&mut self, key: &'static str, value: &T) -> Result<(), Self::Error>
     |        --------------- required by a bound in this associated function
1916 |     where
1917 |         T: ?Sized + Serialize;
     |                     ^^^^^^^^^ required by this bound in `SerializeStruct::serialize_field`
     = note: this error originates in the derive macro `Serialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/bbs_plus/signature.rs:20:19
     |
  20 |     pub(crate) a: G1Point,
     |                   ^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1153 others
note: required by a bound in `models::_::_serde::de::SeqAccess::next_element`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1771:12
     |
1769 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1770 |     where
1771 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/bbs_plus/signature.rs:22:19
     |
  22 |     pub(crate) e: Scalar,
     |                   ^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1153 others
note: required by a bound in `models::_::_serde::de::SeqAccess::next_element`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1771:12
     |
1769 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1770 |     where
1771 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/bbs_plus/signature.rs:24:19
     |
  24 |     pub(crate) s: Scalar,
     |                   ^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1153 others
note: required by a bound in `models::_::_serde::de::SeqAccess::next_element`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1771:12
     |
1769 |     fn next_element<T>(&mut self) -> Result<Option<T>, Self::Error>
     |        ------------ required by a bound in this associated function
1770 |     where
1771 |         T: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `SeqAccess::next_element`

error[E0277]: the trait bound `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/bbs_plus/signature.rs:20:19
     |
  20 |     pub(crate) a: G1Point,
     |                   ^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1153 others
note: required by a bound in `models::_::_serde::de::MapAccess::next_value`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1916:12
     |
1914 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1915 |     where
1916 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/bbs_plus/signature.rs:22:19
     |
  22 |     pub(crate) e: Scalar,
     |                   ^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1153 others
note: required by a bound in `models::_::_serde::de::MapAccess::next_value`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1916:12
     |
1914 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1915 |     where
1916 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>: serde::Deserialize<'de>` is not satisfied
    --> crates/zidentity/src/bbs_plus/signature.rs:24:19
     |
  24 |     pub(crate) s: Scalar,
     |                   ^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>`
     |
     = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>` type
     = note: for types from other crates check whether the crate offers a `serde` feature flag
     = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
               &'a [u8]
               &'a serde_json::value::RawValue
               &'a std::path::Path
               &'a str
               ()
               (T,)
               (T0, T1)
               (T0, T1, T2)
             and 1153 others
note: required by a bound in `models::_::_serde::de::MapAccess::next_value`
    --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde_core-1.0.227/src/de/mod.rs:1916:12
     |
1914 |     fn next_value<V>(&mut self) -> Result<V, Self::Error>
     |        ---------- required by a bound in this associated function
1915 |     where
1916 |         V: Deserialize<'de>,
     |            ^^^^^^^^^^^^^^^^ required by this bound in `MapAccess::next_value`

error[E0277]: the trait bound `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>: serde::Deserialize<'de>` is not satisfied
  --> crates/zidentity/src/bbs_plus/signature.rs:17:35
   |
17 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
             &'a [u8]
             &'a serde_json::value::RawValue
             &'a std::path::Path
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
           and 1153 others
note: required by a bound in `models::_::_serde::__private227::de::missing_field`
  --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.227/src/private/de.rs:26:8
   |
24 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
25 | where
26 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0277]: the trait bound `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>: serde::Deserialize<'de>` is not satisfied
  --> crates/zidentity/src/bbs_plus/signature.rs:17:35
   |
17 | #[derive(Debug, Clone, Serialize, Deserialize)]
   |                                   ^^^^^^^^^^^ the trait `models::_::_serde::Deserialize<'_>` is not implemented for `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>`
   |
   = note: for local types consider adding `#[derive(serde::Deserialize)]` to your `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>` type
   = note: for types from other crates check whether the crate offers a `serde` feature flag
   = help: the following other types implement trait `models::_::_serde::Deserialize<'de>`:
             &'a [u8]
             &'a serde_json::value::RawValue
             &'a std::path::Path
             &'a str
             ()
             (T,)
             (T0, T1)
             (T0, T1, T2)
           and 1153 others
note: required by a bound in `models::_::_serde::__private227::de::missing_field`
  --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/serde-1.0.227/src/private/de.rs:26:8
   |
24 | pub fn missing_field<'de, V, E>(field: &'static str) -> Result<V, E>
   |        ------------- required by a bound in this function
25 | where
26 |     V: Deserialize<'de>,
   |        ^^^^^^^^^^^^^^^^ required by this bound in `missing_field`
   = note: this error originates in the derive macro `Deserialize` (in Nightly builds, run with -Z macro-backtrace for more info)

error[E0599]: no method named `mul` found for struct `ark_ec::short_weierstrass::Projective` in the current scope
   --> crates/zidentity/src/bbs_plus/signature.rs:313:45
    |
313 |                 b += params.h_generators[j].mul(message.scalar);
    |                                             ^^^ method not found in `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>`
   --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/ops/arith.rs:338:8
    |
    = note: the method is available for `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `Mul` which provides `mul` is implemented but not in scope; perhaps you want to import it
    |
  1 + use std::ops::Mul;
    |

error[E0599]: no method named `mul` found for struct `ark_ec::short_weierstrass::Projective` in the current scope
   --> crates/zidentity/src/bbs_plus/signature.rs:319:58
    |
319 |                 b += params.h_generators[secret_gen_idx].mul(signatures[i].s);
    |                                                          ^^^ method not found in `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>`
   --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/ops/arith.rs:338:8
    |
    = note: the method is available for `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `Mul` which provides `mul` is implemented but not in scope; perhaps you want to import it
    |
  1 + use std::ops::Mul;
    |

error[E0369]: cannot multiply `&ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>` by `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>`
   --> crates/zidentity/src/bbs_plus/signature.rs:351:28
    |
351 |         let a = commitment * denominator_inv;
    |                 ---------- ^ --------------- ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>
    |                 |
    |                 &ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>
    |
help: `*` can be used on `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>` if you dereference the left-hand side
    |
351 |         let a = *commitment * denominator_inv;
    |                 +

error[E0369]: cannot multiply `&ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>` by `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>`
   --> crates/zidentity/src/bbs_plus/proof.rs:190:25
    |
190 |         let a_prime = a * r1;
    |                       - ^ -- ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>
    |                       |
    |                       &ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>
    |
help: `*` can be used on `ark_ec::short_weierstrass::Projective<ark_bls12_381::g1::Config>` if you dereference the left-hand side
    |
190 |         let a_prime = *a * r1;
    |                       +

error[E0599]: no method named `is_zero` found for struct `ark_ff::Fp` in the current scope
  --> crates/zidentity/src/bbs_plus/batch.rs:64:31
   |
64 |                 if !candidate.is_zero() {
   |                               ^^^^^^^ method not found in `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>`
   |
  ::: /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/src/identities.rs:28:8
   |
28 |     fn is_zero(&self) -> bool;
   |        ------- the method is available for `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>` here
   |
   = help: items from traits can only be used if the trait is in scope
help: trait `Zero` which provides `is_zero` is implemented but not in scope; perhaps you want to import it
   |
 1 + use ark_std::Zero;
   |

error[E0599]: no method named `is_zero` found for struct `ark_ff::Fp` in the current scope
   --> crates/zidentity/src/bbs_plus/batch.rs:139:26
    |
139 |             let e = if e.is_zero() { Scalar::one() } else { e };
    |                          ^^^^^^^ method not found in `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>`
    |
   ::: /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/num-traits-0.2.19/src/identities.rs:28:8
    |
 28 |     fn is_zero(&self) -> bool;
    |        ------- the method is available for `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>` here
    |
    = help: items from traits can only be used if the trait is in scope
help: trait `Zero` which provides `is_zero` is implemented but not in scope; perhaps you want to import it
    |
  1 + use ark_std::Zero;
    |

error[E0599]: no function or associated item named `one` found for struct `ark_ff::Fp` in the current scope
   --> crates/zidentity/src/bbs_plus/batch.rs:139:46
    |
139 |             let e = if e.is_zero() { Scalar::one() } else { e };
    |                                              ^^^ function or associated item not found in `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>`
    |
note: if you're trying to build a new `ark_ff::Fp<ark_ff::MontBackend<ark_bls12_381::FrConfig, 4>, 4>` consider using one of the following associated functions:
      ark_ff::fp::montgomery_backend::<impl ark_ff::Fp<ark_ff::MontBackend<T, N>, N>>::new
      ark_ff::fp::montgomery_backend::<impl ark_ff::Fp<ark_ff::MontBackend<T, N>, N>>::new_unchecked
      ark_ff::fp::montgomery_backend::<impl ark_ff::Fp<ark_ff::MontBackend<T, N>, N>>::from_sign_and_limbs
   --> /home/zach/.cargo/registry/src/index.crates.io-1949cf8c6b5b557f/ark-ff-0.4.2/src/fields/models/fp/montgomery_backend.rs:691:5
    |
691 |     pub const fn new(element: BigInt<N>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
709 |     pub const fn new_unchecked(element: BigInt<N>) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
730 |     pub const fn from_sign_and_limbs(is_positive: bool, limbs: &[u64]) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: items from traits can only be used if the trait is in scope
help: there is a method `ne` with a similar name, but with different arguments
   --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/cmp.rs:265:5
help: trait `One` which provides `one` is implemented but not in scope; perhaps you want to import it
    |
  1 + use ark_std::One;
    |

error[E0369]: binary operation `==` cannot be applied to type `biometric_auth::BiometricModality`
   --> crates/zidentity/src/biometric_auth.rs:554:60
    |
554 |             .filter(|t| t.user_id == user_id && t.modality == modality)
    |                                                 ---------- ^^ -------- biometric_auth::BiometricModality
    |                                                 |
    |                                                 biometric_auth::BiometricModality
    |
note: an implementation of `std::cmp::PartialEq` might be missing for `biometric_auth::BiometricModality`
   --> crates/zidentity/src/biometric_auth.rs:16:1
    |
 16 | pub enum BiometricModality {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ must implement `std::cmp::PartialEq`
help: consider annotating `biometric_auth::BiometricModality` with `#[derive(PartialEq)]`
    |
 16 + #[derive(PartialEq)]
 17 | pub enum BiometricModality {
    |

error[E0308]: mismatched types
   --> crates/zidentity/src/biometric_processors.rs:595:13
    |
570 |     fn analyze_color_distribution(&self, image: &RgbImage) -> Result<f64> {
    |                                                               ----------- expected `std::result::Result<f64, anyhow::Error>` because of return type
...
595 |             0.8
    |             ^^^ expected `Result<f64, Error>`, found floating-point number
    |
    = note: expected enum `std::result::Result<f64, anyhow::Error>`
               found type `{float}`
help: try wrapping the expression in `Ok`
    |
595 |             Ok(0.8)
    |             +++   +

error[E0308]: mismatched types
   --> crates/zidentity/src/biometric_processors.rs:597:13
    |
570 |     fn analyze_color_distribution(&self, image: &RgbImage) -> Result<f64> {
    |                                                               ----------- expected `std::result::Result<f64, anyhow::Error>` because of return type
...
597 |             0.2
    |             ^^^ expected `Result<f64, Error>`, found floating-point number
    |
    = note: expected enum `std::result::Result<f64, anyhow::Error>`
               found type `{float}`
help: try wrapping the expression in `Ok`
    |
597 |             Ok(0.2)
    |             +++   +

error[E0308]: mismatched types
    --> crates/zidentity/src/biometric_processors.rs:1205:53
     |
1205 |         let confidence = (feature_stability * 0.6 + spectral_uniqueness * 0.4).max(0.0).min(1.0);
     |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f32`, found `f64`

error[E0277]: cannot add `f64` to `f32`
    --> crates/zidentity/src/biometric_processors.rs:1205:51
     |
1205 |         let confidence = (feature_stability * 0.6 + spectral_uniqueness * 0.4).max(0.0).min(1.0);
     |                                                   ^ no implementation for `f32 + f64`
     |
     = help: the trait `std::ops::Add<f64>` is not implemented for `f32`
     = help: the following other types implement trait `std::ops::Add<Rhs>`:
               `&f32` implements `std::ops::Add<&nalgebra::Complex<f32>>`
               `&f32` implements `std::ops::Add<f32>`
               `&f32` implements `std::ops::Add<nalgebra::Complex<f32>>`
               `&f32` implements `std::ops::Add`
               `f32` implements `std::ops::Add<&f32>`
               `f32` implements `std::ops::Add<&nalgebra::Complex<f32>>`
               `f32` implements `std::ops::Add<nalgebra::Complex<f32>>`
               `f32` implements `std::ops::Add<wide::f32x4_::f32x4>`
             and 3 others

error[E0308]: mismatched types
    --> crates/zidentity/src/biometric_processors.rs:1207:12
     |
1207 |         Ok(confidence)
     |         -- ^^^^^^^^^^ expected `f64`, found `f32`
     |         |
     |         arguments to this enum variant are incorrect
     |
help: the type constructed contains `f32` due to the type of the argument passed
    --> crates/zidentity/src/biometric_processors.rs:1207:9
     |
1207 |         Ok(confidence)
     |         ^^^----------^
     |            |
     |            this argument influences the type of `Ok`
note: tuple variant defined here
    --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/result.rs:552:5
help: you can convert an `f32` to an `f64`
     |
1207 |         Ok(confidence.into())
     |                      +++++++

error[E0308]: mismatched types
    --> crates/zidentity/src/biometric_processors.rs:1614:13
     |
1601 |     fn calculate_spectral_quality(&self, features: &[f32]) -> f64 {
     |                                                               --- expected `f64` because of return type
...
1614 |             1.0 - ((normalized_variance - 0.45).abs() / 0.35)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`
     |
help: you can convert an `f32` to an `f64`
     |
1614 |             (1.0 - ((normalized_variance - 0.45).abs() / 0.35)).into()
     |             +                                                 ++++++++

error[E0689]: can't call method `min` on ambiguous numeric type `{float}`
    --> crates/zidentity/src/biometric_processors.rs:1767:28
     |
1767 |         Ok(breathing_score.min(1.0))
     |                            ^^^
     |
help: you must specify a type for this binding, like `f32`
     |
1750 |         let mut breathing_score: f32 = 0.0;
     |                                +++++

error[E0689]: can't call method `abs` on ambiguous numeric type `{integer}`
    --> crates/zidentity/src/biometric_processors.rs:2650:46
     |
2650 |             crossing_number += (next - curr).abs() as u32;
     |                                              ^^^

error[E0308]: mismatched types
    --> crates/zidentity/src/biometric_processors.rs:2932:13
     |
2927 |     fn analyze_temperature_liveness(&self, temperature: f32) -> f64 {
     |                                                                 --- expected `f64` because of return type
...
2932 |             1.0 - ((temperature - (min_temp + max_temp) / 2.0).abs() / ((max_temp - min_temp) / 2.0))
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ expected `f64`, found `f32`
     |
help: you can convert an `f32` to an `f64`
     |
2932 |             (1.0 - ((temperature - (min_temp + max_temp) / 2.0).abs() / ((max_temp - min_temp) / 2.0))).into()
     |             +                                                                                         ++++++++

error[E0308]: mismatched types
    --> crates/zidentity/src/biometric_processors.rs:3201:66
     |
3201 |         for by in (0..height.saturating_sub(block_size)).step_by(block_size) {
     |                                                          ------- ^^^^^^^^^^ expected `usize`, found `u32`
     |                                                          |
     |                                                          arguments to this method are incorrect
     |
note: method defined here
    --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/iter/traits/iterator.rs:423:8
help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit
     |
3201 |         for by in (0..height.saturating_sub(block_size)).step_by(block_size.try_into().unwrap()) {
     |                                                                            ++++++++++++++++++++

error[E0308]: mismatched types
    --> crates/zidentity/src/biometric_processors.rs:3202:69
     |
3202 |             for bx in (0..width.saturating_sub(block_size)).step_by(block_size) {
     |                                                             ------- ^^^^^^^^^^ expected `usize`, found `u32`
     |                                                             |
     |                                                             arguments to this method are incorrect
     |
note: method defined here
    --> /rustc/1159e78c4747b02ef996e55082b704c09b970588/library/core/src/iter/traits/iterator.rs:423:8
help: you can convert a `u32` to a `usize` and panic if the converted value doesn't fit
     |
3202 |             for bx in (0..width.saturating_sub(block_size)).step_by(block_size.try_into().unwrap()) {
     |                                                                               ++++++++++++++++++++

warning: unused import: `Digest`
   --> crates/zidentity/src/crypto.rs:131:28
    |
131 |         use sha2::{Sha256, Digest};
    |                            ^^^^^^

warning: unused import: `Digest`
   --> crates/zidentity/src/crypto.rs:171:28
    |
171 |         use sha2::{Sha256, Digest};
    |                            ^^^^^^

warning: unused import: `Digest`
   --> crates/zidentity/src/crypto.rs:344:28
    |
344 |         use sha2::{Sha256, Digest};
    |                            ^^^^^^

warning: unused import: `Digest`
   --> crates/zidentity/src/crypto.rs:453:28
    |
453 |         use sha2::{Sha256, Digest};
    |                            ^^^^^^

warning: unused variable: `name`
   --> crates/zidentity/src/repository.rs:617:33
    |
617 |     pub fn get_partition(&self, name: &str) -> IdentityResult<()> {
    |                                 ^^^^ help: if this is intentional, prefix it with an underscore: `_name`

error[E0502]: cannot borrow `self.security_params` as immutable because it is also borrowed as mutable
   --> crates/zidentity/src/crypto.rs:243:13
    |
237 |         let params = self.get_bbs_params(messages.len())?;
    |                      ---- mutable borrow occurs here
238 |
239 |         BBSPlusSignatureScheme::sign(
    |         ---------------------------- mutable borrow later used by call
...
243 |             &self.security_params,
    |             ^^^^^^^^^^^^^^^^^^^^^ immutable borrow occurs here

error[E0502]: cannot borrow `self.security_params` as immutable because it is also borrowed as mutable
   --> crates/zidentity/src/crypto.rs:263:13
    |
256 |         let params = self.get_bbs_params(messages.len())?;
    |                      ---- mutable borrow occurs here
257 |
258 |         BBSPlusSignatureScheme::verify(
    |         ------------------------------ mutable borrow later used by call
...
263 |             &self.security_params,
    |             ^^^^^^^^^^^^^^^^^^^^^ immutable borrow occurs here

error[E0502]: cannot borrow `self.security_params` as immutable because it is also borrowed as mutable
   --> crates/zidentity/src/crypto.rs:299:13
    |
278 |         let params = self.get_bbs_params(messages.len())?;
    |                      ---- mutable borrow occurs here
...
295 |         let proof = SelectiveDisclosureProofScheme::generate_proof(
    |                     ---------------------------------------------- mutable borrow later used by call
...
299 |             &self.security_params,
    |             ^^^^^^^^^^^^^^^^^^^^^ immutable borrow occurs here

error[E0502]: cannot borrow `self.security_params` as immutable because it is also borrowed as mutable
   --> crates/zidentity/src/crypto.rs:337:13
    |
325 |         let params = self.get_bbs_params(max_index + 1)?;
    |                      ---- mutable borrow occurs here
...
332 |         SelectiveDisclosureProofScheme::verify_proof(
    |         -------------------------------------------- mutable borrow later used by call
...
337 |             &self.security_params,
    |             ^^^^^^^^^^^^^^^^^^^^^ immutable borrow occurs here

error[E0716]: temporary value dropped while borrowed
   --> crates/zidentity/src/proofs.rs:977:41
    |
977 |             transcript.challenge_bytes(&format!("query_{}", i).as_bytes(), &mut challenge_bytes);
    |             ----------------------------^^^^^^^^^^^^^^^^^^^^^^----------------------------------- temporary value is freed at the end of this statement
    |             |                           |
    |             |                           creates a temporary value which is freed while still in use
    |             argument requires that borrow lasts for `'static`
    |
    = note: this error originates in the macro `format` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: unused variable: `security_params`
   --> crates/zidentity/src/bbs_plus/signature.rs:108:9
    |
108 |         security_params: &SecurityParams,
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_security_params`

warning: unused variable: `security_params`
   --> crates/zidentity/src/bbs_plus/signature.rs:173:9
    |
173 |         security_params: &SecurityParams,
    |         ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_security_params`

warning: unused variable: `coefficients`
   --> crates/zidentity/src/bbs_plus/proof.rs:510:9
    |
510 |         coefficients: &[Scalar],
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_coefficients`

warning: unused variable: `randomness`
   --> crates/zidentity/src/bbs_plus/batch.rs:248:9
    |
248 |         randomness: &ProofRandomness,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_randomness`

warning: unused variable: `image`
   --> crates/zidentity/src/biometric_processors.rs:194:33
    |
194 |     fn extract_landmarks(&self, image: &RgbImage, face_bounds: &(u32, u32, u32, u32)) -> Result<Vec<(f32, f32)>> {
    |                                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_image`

warning: unused variable: `width`
   --> crates/zidentity/src/biometric_processors.rs:435:14
    |
435 |         let (width, height) = image.dimensions();
    |              ^^^^^ help: if this is intentional, prefix it with an underscore: `_width`

warning: unused variable: `height`
   --> crates/zidentity/src/biometric_processors.rs:435:21
    |
435 |         let (width, height) = image.dimensions();
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_height`

warning: unused variable: `width`
   --> crates/zidentity/src/biometric_processors.rs:688:14
    |
688 |         let (width, height) = image.dimensions();
    |              ^^^^^ help: if this is intentional, prefix it with an underscore: `_width`

warning: unused variable: `height`
   --> crates/zidentity/src/biometric_processors.rs:688:21
    |
688 |         let (width, height) = image.dimensions();
    |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_height`

warning: unused variable: `width`
    --> crates/zidentity/src/biometric_processors.rs:2041:14
     |
2041 |         let (width, height) = image.dimensions();
     |              ^^^^^ help: if this is intentional, prefix it with an underscore: `_width`

warning: unused variable: `height`
    --> crates/zidentity/src/biometric_processors.rs:2041:21
     |
2041 |         let (width, height) = image.dimensions();
     |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_height`

warning: unused variable: `height`
    --> crates/zidentity/src/biometric_processors.rs:2227:21
     |
2227 |         let (width, height) = image.dimensions();
     |                     ^^^^^^ help: if this is intentional, prefix it with an underscore: `_height`

warning: unused variable: `mean_pressure`
    --> crates/zidentity/src/biometric_processors.rs:2994:13
     |
2994 |         let mean_pressure = pressure_data.iter().sum::<f32>() / pressure_data.len() as f32;
     |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_mean_pressure`

warning: variable `surrounding_brightness` is assigned to, but never used
    --> crates/zidentity/src/biometric_processors.rs:3029:29
     |
3029 |                     let mut surrounding_brightness = 0u32;
     |                             ^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: consider using `_surrounding_brightness` instead

Some errors have detailed explanations: E0061, E0252, E0277, E0308, E0369, E0382, E0502, E0592, E0599...
For more information about an error, try `rustc --explain E0061`.
warning: `zidentity` (lib) generated 114 warnings
error: could not compile `zidentity` (lib) due to 109 previous errors; 114 warnings emitted
